  Line 16) Charset.forName("utf-8") ==> java.nio.charset.Charset.forName(java.lang.String)
  Line 22) assertNotNull(reader) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 26) assertNotNull(input) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 27) assertNotNull(encoding) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 29) encoding.name() ==> java.nio.charset.Charset.name()
  Line 38) provider(input, UTF8) ==> com.github.javaparser.Providers.provider(java.io.InputStream, java.nio.charset.Charset)
  Line 42) provider(new FileInputStream(assertNotNull(file)), assertNotNull(encoding)) ==> com.github.javaparser.Providers.provider(java.io.InputStream, java.nio.charset.Charset)
  Line 42) assertNotNull(file) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 42) assertNotNull(encoding) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 46) provider(assertNotNull(file), UTF8) ==> com.github.javaparser.Providers.provider(java.io.File, java.nio.charset.Charset)
  Line 46) assertNotNull(file) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 37) getParameters().add(parameter) ==> java.util.List.add(E)
  Line 37) getParameters() ==> com.github.javaparser.ast.nodeTypes.NodeWithParameters.getParameters()
  Line 110) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 183) ((TypeDeclaration<?>) this).getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 184) getMembers().add(constructorDeclaration) ==> java.util.List.add(E)
  Line 184) getMembers() ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMembers()
  Line 111) setVariables(variables) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 38) parameter.setParentNode((Node) this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 43) addAndGetParameter(new Parameter(type, new VariableDeclaratorId(name))) ==> com.github.javaparser.ast.nodeTypes.NodeWithParameters.addAndGetParameter(com.github.javaparser.ast.body.Parameter)
  Line 50) provider(Files.newInputStream(assertNotNull(path)), assertNotNull(encoding)) ==> com.github.javaparser.Providers.provider(java.io.InputStream, java.nio.charset.Charset)
  Line 50) Files.newInputStream(assertNotNull(path)) ==> java.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)
  Line 50) assertNotNull(path) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 50) assertNotNull(encoding) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 213) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 213) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 215) n.getPackage() ==> com.github.javaparser.ast.CompilationUnit.getPackage()
  Line 54) provider(assertNotNull(path), UTF8) ==> com.github.javaparser.Providers.provider(java.nio.file.Path, java.nio.charset.Charset)
  Line 54) assertNotNull(path) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 58) assertNotNull(source) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
