  Line 167) i.next() ==> java.util.Iterator.next()
  Line 21) assertNotNull(problems) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 26) singletonList(new Problem(throwable.getMessage(), Optional.empty(), Optional.of(throwable))) ==> java.util.Collections.singletonList(T)
  Line 86) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 26) throwable.getMessage() ==> java.lang.Throwable.getMessage()
  Line 26) Optional.empty() ==> java.util.Optional.empty()
  Line 26) Optional.of(throwable) ==> java.util.Optional.of(T)
  Line 87) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 87) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 168) t.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 169) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 170) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 173) printer.print(">") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 178) isNullOrEmpty(args) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 179) printer.print("<") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 32) message.append(problem.toString()).append(EOL) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 180) args.iterator() ==> java.util.List.iterator()
  Line 180) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 181) i.next() ==> java.util.Iterator.next()
  Line 32) message.append(problem.toString()) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 32) problem.toString() ==> com.github.javaparser.Problem.toString()
  Line 34) message.toString() ==> java.lang.StringBuilder.toString()
  Line 25) getModifiers().addAll(Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)))) ==> java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  Line 25) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 25) Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 25) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 26) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 26) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 91) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 31) getModifiers().contains(Modifier.STATIC) ==> java.util.AbstractCollection.contains(java.lang.Object)
