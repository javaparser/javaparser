  Line 41) setExpr(expr) ==> com.github.javaparser.ast.stmt.ReturnStmt.setExpr(com.github.javaparser.ast.expr.Expression)
  Line 46) setExpr(expr) ==> com.github.javaparser.ast.stmt.ReturnStmt.setExpr(com.github.javaparser.ast.expr.Expression)
  Line 55) setExpr(new NameExpr(expr)) ==> com.github.javaparser.ast.stmt.ReturnStmt.setExpr(com.github.javaparser.ast.expr.Expression)
  Line 393) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 393) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 396) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 397) _n.isStatic() ==> com.github.javaparser.ast.body.InitializerDeclaration.isStatic()
  Line 58) setImplements(implementsList) ==> com.github.javaparser.ast.body.EnumDeclaration.setImplements(java.util.List<com.github.javaparser.ast.type.ClassOrInterfaceType>)
  Line 399) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 405) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 59) setEntries(entries) ==> com.github.javaparser.ast.body.EnumDeclaration.setEntries(java.util.List<com.github.javaparser.ast.body.EnumConstantDeclaration>)
  Line 405) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 407) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 408) _n.getContent() ==> com.github.javaparser.ast.comments.Comment.getContent()
  Line 66) setImplements(implementsList) ==> com.github.javaparser.ast.body.EnumDeclaration.setImplements(java.util.List<com.github.javaparser.ast.type.ClassOrInterfaceType>)
  Line 67) setEntries(entries) ==> com.github.javaparser.ast.body.EnumDeclaration.setEntries(java.util.List<com.github.javaparser.ast.body.EnumConstantDeclaration>)
  Line 410) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 416) cloneNodes(_n.getScope(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 416) _n.getScope() ==> com.github.javaparser.ast.type.ClassOrInterfaceType.getScope()
  Line 67) field.getName() ==> com.github.javaparser.ast.expr.NameExpr.getName()
  Line 79) setFieldExpr(new NameExpr(field)) ==> com.github.javaparser.ast.expr.FieldAccessExpr.setFieldExpr(com.github.javaparser.ast.expr.NameExpr)
  Line 85) setAsParentNodeOf(this.field) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 91) setAsParentNodeOf(this.scope) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 104) setAsParentNodeOf(this.typeArguments) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 60) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)
  Line 417) visit(_n.getTypeArguments(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
