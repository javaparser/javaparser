  Line 46) setType(type) ==> com.github.javaparser.ast.expr.ClassExpr.setType(com.github.javaparser.ast.type.Type)
  Line 51) setType(type) ==> com.github.javaparser.ast.expr.ClassExpr.setType(com.github.javaparser.ast.type.Type)
  Line 313) _n.getAnnotations() ==> com.github.javaparser.ast.body.BodyDeclaration.getAnnotations()
  Line 1396) resources.next() ==> java.util.Iterator.next()
  Line 1397) resources.hasNext() ==> java.util.Iterator.hasNext()
  Line 1398) printer.print(";") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1399) printer.printLn() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn()
  Line 1401) printer.indent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.indent()
  Line 1406) n.getResources().size() ==> java.util.List.size()
  Line 1406) n.getResources() ==> com.github.javaparser.ast.stmt.TryStmt.getResources()
  Line 1407) printer.unindent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.unindent()
  Line 1409) printer.print(") ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1411) n.getTryBlock().accept(this, arg) ==> com.github.javaparser.ast.stmt.BlockStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1411) n.getTryBlock() ==> com.github.javaparser.ast.stmt.TryStmt.getTryBlock()
  Line 1412) n.getCatchs() ==> com.github.javaparser.ast.stmt.TryStmt.getCatchs()
  Line 1413) n.getCatchs() ==> com.github.javaparser.ast.stmt.TryStmt.getCatchs()
  Line 1414) c.accept(this, arg) ==> com.github.javaparser.ast.stmt.CatchClause.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1417) n.getFinallyBlock() ==> com.github.javaparser.ast.stmt.TryStmt.getFinallyBlock()
  Line 1418) printer.print(" finally ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1419) n.getFinallyBlock().accept(this, arg) ==> com.github.javaparser.ast.stmt.BlockStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1419) n.getFinallyBlock() ==> com.github.javaparser.ast.stmt.TryStmt.getFinallyBlock()
  Line 1425) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 1425) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1426) printer.print(" catch (") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 314) visit(_n.getTypeParameters(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 314) _n.getTypeParameters() ==> com.github.javaparser.ast.body.ConstructorDeclaration.getTypeParameters()
  Line 1427) n.getParam().accept(this, arg) ==> com.github.javaparser.ast.body.Parameter.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1427) n.getParam() ==> com.github.javaparser.ast.stmt.CatchClause.getParam()
  Line 1428) printer.print(") ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 56) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, A)
  Line 1429) n.getBody().accept(this, arg) ==> com.github.javaparser.ast.stmt.BlockStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1429) n.getBody() ==> com.github.javaparser.ast.stmt.CatchClause.getBody()
  Line 1435) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 49) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.type.UnknownType, A)
  Line 1435) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 315) visit(_n.getParameters(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 54) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)
  Line 61) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, A)
