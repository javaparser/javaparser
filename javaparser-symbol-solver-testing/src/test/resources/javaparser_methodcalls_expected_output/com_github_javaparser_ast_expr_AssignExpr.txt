  Line 721) n.getType() ==> com.github.javaparser.ast.expr.ClassExpr.getType()
  Line 722) printer.print(".class") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 238) clazz.getName() ==> java.lang.Class.getName()
  Line 727) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 58) setTarget(target) ==> com.github.javaparser.ast.expr.AssignExpr.setTarget(com.github.javaparser.ast.expr.Expression)
  Line 59) setValue(value) ==> com.github.javaparser.ast.expr.AssignExpr.setValue(com.github.javaparser.ast.expr.Expression)
  Line 60) setOperator(op) ==> com.github.javaparser.ast.expr.AssignExpr.setOperator(com.github.javaparser.ast.expr.AssignExpr.Operator)
  Line 65) setTarget(target) ==> com.github.javaparser.ast.expr.AssignExpr.setTarget(com.github.javaparser.ast.expr.Expression)
  Line 66) setValue(value) ==> com.github.javaparser.ast.expr.AssignExpr.setValue(com.github.javaparser.ast.expr.Expression)
  Line 67) setOperator(op) ==> com.github.javaparser.ast.expr.AssignExpr.setOperator(com.github.javaparser.ast.expr.AssignExpr.Operator)
  Line 251) getImports().stream().anyMatch(i -> i.getName().toString().equals(name)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 251) getImports().stream() ==> java.util.Collection.stream()
  Line 251) getImports() ==> com.github.javaparser.ast.CompilationUnit.getImports()
  Line 727) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 251) i.getName().toString().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 72) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, A)
