  Line 129) addField(type, name, Modifier.PUBLIC) ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.addField(java.lang.String, java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 256) provider(importDeclaration) ==> com.github.javaparser.Providers.provider(java.lang.String)
  Line 140) addField(typeClass, name, Modifier.PROTECTED) ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.addField(java.lang.Class<?>, java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 176) children.addAll(node.getChildrenNodes()) ==> java.util.List.addAll(java.util.Collection<? extends E>)
  Line 20) ((Node) this).tryAddImportToParentCompilationUnit(clazz) ==> com.github.javaparser.ast.Node.tryAddImportToParentCompilationUnit(java.lang.Class<?>)
  Line 176) node.getChildrenNodes() ==> com.github.javaparser.ast.Node.getChildrenNodes()
  Line 21) addExtends(clazz.getSimpleName()) ==> com.github.javaparser.ast.nodeTypes.NodeWithExtends.addExtends(java.lang.String)
  Line 21) clazz.getSimpleName() ==> java.lang.Class.getSimpleName()
  Line 33) getExtends().add(classOrInterfaceType) ==> java.util.List.add(E)
  Line 33) getExtends() ==> com.github.javaparser.ast.nodeTypes.NodeWithExtends.getExtends()
  Line 85) setVariables(singletonList(var)) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 268) simplifiedParse(EXPRESSION, provider(expression)) ==> com.github.javaparser.JavaParser.simplifiedParse(com.github.javaparser.ParseStart<T>, com.github.javaparser.Provider)
  Line 152) addField(type, name, Modifier.PROTECTED) ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.addField(java.lang.String, java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 177) PositionUtils.sortByBeginPosition(children) ==> com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)
  Line 178) Collections.reverse(children) ==> java.util.Collections.reverse(java.util.List<? extends java.lang.Object>)
  Line 181) attributeLineCommentToNodeOrChild(child, lineComment) ==> com.github.javaparser.CommentsInserter.attributeLineCommentToNodeOrChild(com.github.javaparser.ast.Node, com.github.javaparser.ast.comments.LineComment)
  Line 191) PositionUtils.areInOrder(a, b) ==> com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
  Line 192) thereAreLinesBetween(b, a) ==> com.github.javaparser.CommentsInserter.thereAreLinesBetween(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
  Line 268) provider(expression) ==> com.github.javaparser.Providers.provider(java.lang.String)
  Line 194) a.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 280) simplifiedParse(ANNOTATION, provider(annotation)) ==> com.github.javaparser.JavaParser.simplifiedParse(com.github.javaparser.ParseStart<T>, com.github.javaparser.Provider)
  Line 280) provider(annotation) ==> com.github.javaparser.Providers.provider(java.lang.String)
  Line 195) b.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 85) singletonList(var) ==> java.util.Collections.singletonList(T)
  Line 292) simplifiedParse(ANNOTATION_BODY, provider(body)) ==> com.github.javaparser.JavaParser.simplifiedParse(com.github.javaparser.ParseStart<T>, com.github.javaparser.Provider)
  Line 34) classOrInterfaceType.setParentNode((Node) this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
