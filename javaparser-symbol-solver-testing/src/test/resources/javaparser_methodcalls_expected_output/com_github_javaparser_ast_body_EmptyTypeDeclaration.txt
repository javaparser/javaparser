  Line 37) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 41) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 1528) n.getContent() ==> com.github.javaparser.ast.comments.Comment.getContent()
  Line 1529) printer.printLn("*/") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn(java.lang.String)
  Line 1534) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 1534) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1536) n.getParameters() ==> com.github.javaparser.ast.expr.LambdaExpr.getParameters()
  Line 1537) n.isParametersEnclosed() ==> com.github.javaparser.ast.expr.LambdaExpr.isParametersEnclosed()
  Line 1540) printer.print("(") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1543) parameters.iterator() ==> java.util.List.iterator()
  Line 1543) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 1544) i.next() ==> java.util.Iterator.next()
  Line 1545) p.accept(this, arg) ==> com.github.javaparser.ast.body.Parameter.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1546) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 1547) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1552) printer.print(")") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1555) printer.print(" -> ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1556) n.getBody() ==> com.github.javaparser.ast.expr.LambdaExpr.getBody()
  Line 1559) ((ExpressionStmt) body).getExpression().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1559) ((ExpressionStmt) body).getExpression() ==> com.github.javaparser.ast.stmt.ExpressionStmt.getExpression()
  Line 1561) body.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1568) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 1568) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1569) n.getScope() ==> com.github.javaparser.ast.expr.MethodReferenceExpr.getScope()
  Line 1570) n.getIdentifier() ==> com.github.javaparser.ast.expr.MethodReferenceExpr.getIdentifier()
  Line 1572) n.getScope().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1572) n.getScope() ==> com.github.javaparser.ast.expr.MethodReferenceExpr.getScope()
  Line 1575) printer.print("::") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1576) printTypeArgs(n, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printTypeArgs(com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments<?>, java.lang.Object)
  Line 1578) printer.print(identifier) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1585) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 1585) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1586) n.getType() ==> com.github.javaparser.ast.expr.TypeExpr.getType()
  Line 1587) n.getType().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1587) n.getType() ==> com.github.javaparser.ast.expr.TypeExpr.getType()
  Line 1593) printAnnotations(arrayBracketPair.getAnnotations(), true, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, java.lang.Object)
  Line 1593) arrayBracketPair.getAnnotations() ==> com.github.javaparser.ast.ArrayBracketPair.getAnnotations()
  Line 1594) printer.print("[]") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 330) visit(_n.getAnnotations(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 1600) node.getParentNode() ==> com.github.javaparser.ast.Node.getParentNode()
  Line 330) _n.getAnnotations() ==> com.github.javaparser.ast.body.BodyDeclaration.getAnnotations()
  Line 1603) everything.addAll(parent.getChildrenNodes()) ==> java.util.List.addAll(java.util.Collection<? extends E>)
  Line 1603) parent.getChildrenNodes() ==> com.github.javaparser.ast.Node.getChildrenNodes()
  Line 1604) sortByBeginPosition(everything) ==> com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)
  Line 1606) everything.size() ==> java.util.List.size()
  Line 1607) everything.get(i) ==> java.util.List.get(int)
  Line 1612) everything.get(i) ==> java.util.List.get(int)
  Line 1615) everything.get(i) ==> java.util.List.get(int)
  Line 1617) nodeToPrint.getClass() ==> java.lang.Object.getClass()
  Line 1618) nodeToPrint.accept(this, null) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1625) everything.addAll(node.getChildrenNodes()) ==> java.util.List.addAll(java.util.Collection<? extends E>)
  Line 1625) node.getChildrenNodes() ==> com.github.javaparser.ast.Node.getChildrenNodes()
  Line 1626) sortByBeginPosition(everything) ==> com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)
  Line 1627) everything.isEmpty() ==> java.util.List.isEmpty()
  Line 1633) everything.size() ==> java.util.List.size()
  Line 1634) everything.get(everything.size() - 1 - commentsAtEnd) ==> java.util.List.get(int)
  Line 1634) everything.size() ==> java.util.List.size()
  Line 1641) everything.get(everything.size() - commentsAtEnd + i).accept(this, null) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1641) everything.get(everything.size() - commentsAtEnd + i) ==> java.util.List.get(int)
  Line 1641) everything.size() ==> java.util.List.size()
  Line 48) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.type.VoidType, A)
  Line 75) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, A)
  Line 331) visit(_n.getTypeParameters(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 62) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)
  Line 46) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.body.EmptyTypeDeclaration, A)
