  Line 55) Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 271) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 25) setDimension(dimension) ==> com.github.javaparser.ast.ArrayCreationLevel.setDimension(com.github.javaparser.ast.expr.Expression)
  Line 26) setAnnotations(annotations) ==> com.github.javaparser.ast.ArrayCreationLevel.setAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>)
  Line 272) n.isEmptyImportDeclaration() ==> com.github.javaparser.ast.ImportDeclaration.isEmptyImportDeclaration()
  Line 273) printer.print("import ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 59) setInitializer(initializer) ==> com.github.javaparser.ast.expr.ArrayCreationExpr.setInitializer(com.github.javaparser.ast.expr.ArrayInitializerExpr)
  Line 274) n.isStatic() ==> com.github.javaparser.ast.ImportDeclaration.isStatic()
  Line 275) printer.print("static ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 59) comments.stream().filter(comment -> comment instanceof JavadocComment).map(comment -> (JavadocComment) comment).collect(Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 59) comments.stream().filter(comment -> comment instanceof JavadocComment).map(comment -> (JavadocComment) comment) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 59) comments.stream().filter(comment -> comment instanceof JavadocComment) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 59) comments.stream() ==> java.util.Collection.stream()
  Line 62) Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 66) comments.add(comment) ==> java.util.TreeSet.add(E)
  Line 70) getComments() ==> com.github.javaparser.ast.comments.CommentsCollection.getComments()
  Line 73) c.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 73) comment.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 74) c.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 63) setType(type) ==> com.github.javaparser.ast.expr.ArrayCreationExpr.setType(com.github.javaparser.ast.type.Type)
  Line 74) comment.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 75) c.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 75) comment.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 254) ((MethodDeclaration) m).getParameters().stream().map(p -> p.getType().toString()).collect(toSet()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 254) ((MethodDeclaration) m).getParameters().stream().map(p -> p.getType().toString()) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 254) ((MethodDeclaration) m).getParameters().stream() ==> java.util.Collection.stream()
  Line 64) setInitializer(null) ==> com.github.javaparser.ast.expr.ArrayCreationExpr.setInitializer(com.github.javaparser.ast.expr.ArrayInitializerExpr)
  Line 254) ((MethodDeclaration) m).getParameters() ==> com.github.javaparser.ast.body.MethodDeclaration.getParameters()
  Line 254) p.getType().toString() ==> com.github.javaparser.ast.Node.toString()
  Line 76) Math.abs(c.getEnd().column - comment.getEnd().column) ==> java.lang.Math.abs(int)
  Line 277) n.getName().accept(this, arg) ==> com.github.javaparser.ast.expr.NameExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 277) n.getName() ==> com.github.javaparser.ast.ImportDeclaration.getName()
  Line 278) n.isAsterisk() ==> com.github.javaparser.ast.ImportDeclaration.isAsterisk()
  Line 279) printer.print(".*") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 282) printer.printLn(";") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn(java.lang.String)
  Line 76) c.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 284) printOrphanCommentsEnding(n) ==> com.github.javaparser.ast.visitor.DumpVisitor.printOrphanCommentsEnding(com.github.javaparser.ast.Node)
  Line 254) p.getType() ==> com.github.javaparser.ast.body.Parameter.getType()
  Line 255) toSet() ==> java.util.stream.Collectors.toSet()
  Line 289) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 76) comment.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 88) comments.size() ==> java.util.TreeSet.size()
  Line 69) setType(type) ==> com.github.javaparser.ast.expr.ArrayCreationExpr.setType(com.github.javaparser.ast.type.Type)
  Line 70) setInitializer(null) ==> com.github.javaparser.ast.expr.ArrayCreationExpr.setInitializer(com.github.javaparser.ast.expr.ArrayInitializerExpr)
  Line 256) Stream.of(paramTypes).map(Class::getSimpleName).collect(toSet()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 256) Stream.of(paramTypes).map(Class::getSimpleName) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 256) Stream.of(paramTypes) ==> java.util.stream.Stream.of(T...)
  Line 256) toSet() ==> java.util.stream.Collectors.toSet()
  Line 257) toList() ==> java.util.stream.Collectors.toList()
  Line 289) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 290) printMemberAnnotations(n.getAnnotations(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printMemberAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, java.lang.Object)
  Line 290) n.getAnnotations() ==> com.github.javaparser.ast.body.BodyDeclaration.getAnnotations()
  Line 291) printModifiers(n.getModifiers()) ==> com.github.javaparser.ast.visitor.DumpVisitor.printModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 93) result.comments.addAll(comments.stream().filter(comment -> !other.contains(comment)).collect(Collectors.toList())) ==> java.util.TreeSet.addAll(java.util.Collection<? extends E>)
  Line 291) n.getModifiers() ==> com.github.javaparser.ast.body.TypeDeclaration.getModifiers()
  Line 293) n.isInterface() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface()
  Line 294) printer.print("interface ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 296) printer.print("class ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 267) getMembers().stream().filter(m -> m instanceof FieldDeclaration && ((FieldDeclaration) m).getVariables().stream().anyMatch(var -> var.getId().getName().equals(name))).findFirst().orElse(null) ==> java.util.Optional.orElse(T)
  Line 267) getMembers().stream().filter(m -> m instanceof FieldDeclaration && ((FieldDeclaration) m).getVariables().stream().anyMatch(var -> var.getId().getName().equals(name))).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 267) getMembers().stream().filter(m -> m instanceof FieldDeclaration && ((FieldDeclaration) m).getVariables().stream().anyMatch(var -> var.getId().getName().equals(name))) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 267) getMembers().stream() ==> java.util.Collection.stream()
  Line 267) getMembers() ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMembers()
  Line 94) comments.stream().filter(comment -> !other.contains(comment)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 94) comments.stream().filter(comment -> !other.contains(comment)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 94) comments.stream() ==> java.util.Collection.stream()
  Line 95) other.contains(comment) ==> com.github.javaparser.ast.comments.CommentsCollection.contains(com.github.javaparser.ast.comments.Comment)
  Line 96) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 299) printer.print(n.getName()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 268) ((FieldDeclaration) m).getVariables().stream().anyMatch(var -> var.getId().getName().equals(name)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 30) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, A)
  Line 75) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)
  Line 63) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)
