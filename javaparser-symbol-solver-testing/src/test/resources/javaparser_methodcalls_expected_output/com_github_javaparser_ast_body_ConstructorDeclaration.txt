  Line 1133) printer.indent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.indent()
  Line 1134) n.getEntries() ==> com.github.javaparser.ast.stmt.SwitchStmt.getEntries()
  Line 51) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 1135) e.accept(this, arg) ==> com.github.javaparser.ast.stmt.SwitchEntryStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1137) printer.unindent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.unindent()
  Line 1139) printer.print("}") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 67) setModifiers(modifiers) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 1145) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 1145) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1146) n.getLabel() ==> com.github.javaparser.ast.stmt.SwitchEntryStmt.getLabel()
  Line 1147) printer.print("case ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 68) setName(name) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setName(java.lang.String)
  Line 76) setModifiers(modifiers) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 1148) n.getLabel().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 77) setTypeParameters(typeParameters) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(java.util.List<com.github.javaparser.ast.type.TypeParameter>)
  Line 1148) n.getLabel() ==> com.github.javaparser.ast.stmt.SwitchEntryStmt.getLabel()
  Line 1149) printer.print(":") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1151) printer.print("default:") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1153) printer.printLn() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn()
  Line 1154) printer.indent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.indent()
  Line 78) setName(name) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setName(java.lang.String)
  Line 1155) n.getStmts() ==> com.github.javaparser.ast.stmt.SwitchEntryStmt.getStmts()
  Line 1156) n.getStmts() ==> com.github.javaparser.ast.stmt.SwitchEntryStmt.getStmts()
  Line 79) setParameters(parameters) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(java.util.List<com.github.javaparser.ast.body.Parameter>)
  Line 1157) s.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 80) setThrows(throws_) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setThrows(java.util.List<com.github.javaparser.ast.type.ReferenceType>)
  Line 1158) printer.printLn() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn()
  Line 1161) printer.unindent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.unindent()
  Line 1166) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 1166) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 81) setBody(block) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)
  Line 88) setModifiers(modifiers) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 1167) printer.print("break") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1168) n.getId() ==> com.github.javaparser.ast.stmt.BreakStmt.getId()
  Line 1169) printer.print(" ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 89) setTypeParameters(typeParameters) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(java.util.List<com.github.javaparser.ast.type.TypeParameter>)
  Line 1170) printer.print(n.getId()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1170) n.getId() ==> com.github.javaparser.ast.stmt.BreakStmt.getId()
  Line 1172) printer.print(";") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 90) setName(name) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setName(java.lang.String)
  Line 73) setAsParentNodeOf(this.body) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 1177) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 1177) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1178) printer.print("return") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1179) n.getExpr() ==> com.github.javaparser.ast.stmt.ReturnStmt.getExpr()
  Line 79) setAsParentNodeOf(this.condition) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 1180) printer.print(" ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 91) setParameters(parameters) ==> com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(java.util.List<com.github.javaparser.ast.body.Parameter>)
  Line 1181) n.getExpr().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 78) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.PackageDeclaration, A)
  Line 80) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.type.TypeParameter, A)
