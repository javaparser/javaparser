  Line 128) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 44) setStmts(stmts) ==> com.github.javaparser.ast.stmt.BlockStmt.setStmts(java.util.List<com.github.javaparser.ast.stmt.Statement>)
  Line 57) getTypeArguments().isEmpty() ==> java.util.List.isEmpty()
  Line 57) getTypeArguments() ==> com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.getTypeArguments()
  Line 65) setTypeArguments(empty) ==> com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.setTypeArguments(java.util.List<com.github.javaparser.ast.type.Type<?>>)
  Line 73) setTypeArguments((List<Type<?>>) null) ==> com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.setTypeArguments(java.util.List<com.github.javaparser.ast.type.Type<?>>)
  Line 131) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 254) n.getName() ==> com.github.javaparser.ast.expr.NameExpr.getName()
  Line 78) setTypeArguments(arrayToList(typeArguments)) ==> com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.setTypeArguments(java.util.List<com.github.javaparser.ast.type.Type<?>>)
  Line 78) arrayToList(typeArguments) ==> com.github.javaparser.utils.Utils.arrayToList(T[])
  Line 256) printOrphanCommentsEnding(n) ==> com.github.javaparser.ast.visitor.DumpVisitor.printOrphanCommentsEnding(com.github.javaparser.ast.Node)
  Line 134) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 261) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 49) setStmts(stmts) ==> com.github.javaparser.ast.stmt.BlockStmt.setStmts(java.util.List<com.github.javaparser.ast.stmt.Statement>)
  Line 71) setAsParentNodeOf(this.index) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 45) comments.stream().filter(comment -> comment instanceof LineComment).map(comment -> (LineComment) comment).collect(Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
