  Line 315) printer.print(" implements ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 316) n.getImplements().iterator() ==> java.util.List.iterator()
  Line 53) setName(name) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.setName(java.lang.String)
  Line 57) setScope(scope) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.setScope(com.github.javaparser.ast.type.ClassOrInterfaceType)
  Line 316) n.getImplements() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplements()
  Line 316) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 317) i.next() ==> java.util.Iterator.next()
  Line 58) setName(name) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.setName(java.lang.String)
  Line 63) setScope(scope) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.setScope(com.github.javaparser.ast.type.ClassOrInterfaceType)
  Line 64) setName(name) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.setName(java.lang.String)
  Line 65) setTypeArguments(typeArguments) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.setTypeArguments(java.util.List<com.github.javaparser.ast.type.Type<?>>)
  Line 318) c.accept(this, arg) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 319) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 320) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 325) printer.printLn(" {") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn(java.lang.String)
  Line 326) printer.indent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.indent()
  Line 327) isNullOrEmpty(n.getMembers()) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 327) n.getMembers() ==> com.github.javaparser.ast.body.TypeDeclaration.getMembers()
  Line 153) _n.getTypeBound() ==> com.github.javaparser.ast.type.TypeParameter.getTypeBound()
  Line 328) printMembers(n.getMembers(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printMembers(java.util.List<com.github.javaparser.ast.body.BodyDeclaration<?>>, java.lang.Object)
  Line 328) n.getMembers() ==> com.github.javaparser.ast.body.TypeDeclaration.getMembers()
  Line 331) printOrphanCommentsEnding(n) ==> com.github.javaparser.ast.visitor.DumpVisitor.printOrphanCommentsEnding(com.github.javaparser.ast.Node)
  Line 333) printer.unindent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.unindent()
  Line 334) printer.print("}") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 339) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 339) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 340) printer.print(";") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 342) printOrphanCommentsEnding(n) ==> com.github.javaparser.ast.visitor.DumpVisitor.printOrphanCommentsEnding(com.github.javaparser.ast.Node)
  Line 347) printer.print("/**") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 348) printer.print(n.getContent()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 348) n.getContent() ==> com.github.javaparser.ast.comments.Comment.getContent()
  Line 349) printer.printLn("*/") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn(java.lang.String)
  Line 354) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 354) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 356) n.getScope() ==> com.github.javaparser.ast.type.ClassOrInterfaceType.getScope()
  Line 357) n.getScope().accept(this, arg) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 357) n.getScope() ==> com.github.javaparser.ast.type.ClassOrInterfaceType.getScope()
  Line 358) printer.print(".") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 360) n.getAnnotations() ==> com.github.javaparser.ast.type.Type.getAnnotations()
  Line 361) ae.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 362) printer.print(" ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 365) printer.print(n.getName()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 365) n.getName() ==> com.github.javaparser.ast.type.ClassOrInterfaceType.getName()
  Line 367) n.isUsingDiamondOperator() ==> com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.isUsingDiamondOperator()
  Line 368) printer.print("<>") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 370) printTypeArgs(n, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printTypeArgs(com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments<?>, java.lang.Object)
  Line 376) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 155) visit(_n.getAnnotations(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 376) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 377) n.getAnnotations() ==> com.github.javaparser.ast.type.TypeParameter.getAnnotations()
  Line 155) _n.getAnnotations() ==> com.github.javaparser.ast.type.TypeParameter.getAnnotations()
  Line 156) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 157) _n.getName() ==> com.github.javaparser.ast.type.TypeParameter.getName()
  Line 159) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 159) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 378) ann.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 379) printer.print(" ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 381) printer.print(n.getName()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 381) n.getName() ==> com.github.javaparser.ast.type.TypeParameter.getName()
  Line 382) isNullOrEmpty(n.getTypeBound()) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 382) n.getTypeBound() ==> com.github.javaparser.ast.type.TypeParameter.getTypeBound()
  Line 383) printer.print(" extends ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 160) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 166) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 166) _n.getContent() ==> com.github.javaparser.ast.comments.Comment.getContent()
  Line 384) n.getTypeBound().iterator() ==> java.util.List.iterator()
  Line 384) n.getTypeBound() ==> com.github.javaparser.ast.type.TypeParameter.getTypeBound()
  Line 384) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 385) i.next() ==> java.util.Iterator.next()
  Line 171) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 171) _n.getContent() ==> com.github.javaparser.ast.comments.Comment.getContent()
  Line 386) c.accept(this, arg) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 387) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 388) printer.print(" & ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 396) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 396) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 397) printAnnotations(n.getAnnotations(), true, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, java.lang.Object)
  Line 397) n.getAnnotations() ==> com.github.javaparser.ast.type.Type.getAnnotations()
  Line 398) n.getType() ==> com.github.javaparser.ast.type.PrimitiveType.getType()
  Line 400) printer.print("boolean") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 403) printer.print("byte") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 406) printer.print("char") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 409) printer.print("double") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 412) printer.print("float") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 415) printer.print("int") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 418) printer.print("long") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 421) printer.print("short") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 432) arrayTypeBuffer.add(arrayType) ==> java.util.List.add(E)
  Line 433) arrayType.getComponentType() ==> com.github.javaparser.ast.type.ArrayType.getComponentType()
  Line 436) type.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 136) ensureNotNull(annotations) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 438) printAnnotations(arrayType.getAnnotations(), true, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, java.lang.Object)
  Line 438) arrayType.getAnnotations() ==> com.github.javaparser.ast.type.Type.getAnnotations()
  Line 439) printer.print("[]") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 445) printAnnotations(n.getAnnotations(), true, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, java.lang.Object)
  Line 445) n.getAnnotations() ==> com.github.javaparser.ast.ArrayCreationLevel.getAnnotations()
  Line 446) printer.print("[") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 447) n.getDimension() ==> com.github.javaparser.ast.ArrayCreationLevel.getDimension()
  Line 448) n.getDimension().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 448) n.getDimension() ==> com.github.javaparser.ast.ArrayCreationLevel.getDimension()
  Line 450) printer.print("]") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 455) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 455) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 456) printAnnotations(n.getAnnotations(), false, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, java.lang.Object)
  Line 456) n.getAnnotations() ==> com.github.javaparser.ast.type.Type.getAnnotations()
  Line 458) n.getElements() ==> com.github.javaparser.ast.type.IntersectionType.getElements()
  Line 158) ensureNotNull(variables) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 59) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, A)
  Line 64) ensureNotNull(stmts) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 165) setAsParentNodeOf(this.annotations) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 178) setAsParentNodeOf(this.elementType) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 459) element.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 463) printer.print(" & ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 71) setAsParentNodeOf(this.stmts) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 469) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 176) visit(_n.getAnnotations(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 51) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, A)
  Line 185) setAsParentNodeOf(this.variables) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 34) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, A)
  Line 69) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)
  Line 80) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)
