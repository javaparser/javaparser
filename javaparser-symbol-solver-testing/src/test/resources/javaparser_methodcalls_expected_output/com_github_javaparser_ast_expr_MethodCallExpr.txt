  Line 51) setScope(scope) ==> com.github.javaparser.ast.expr.MethodCallExpr.setScope(com.github.javaparser.ast.expr.Expression)
  Line 52) setName(name) ==> com.github.javaparser.ast.expr.MethodCallExpr.setName(java.lang.String)
  Line 56) setScope(scope) ==> com.github.javaparser.ast.expr.MethodCallExpr.setScope(com.github.javaparser.ast.expr.Expression)
  Line 57) setName(name) ==> com.github.javaparser.ast.expr.MethodCallExpr.setName(java.lang.String)
  Line 58) setArgs(args) ==> com.github.javaparser.ast.expr.MethodCallExpr.setArgs(java.util.List<com.github.javaparser.ast.expr.Expression>)
  Line 63) setScope(scope) ==> com.github.javaparser.ast.expr.MethodCallExpr.setScope(com.github.javaparser.ast.expr.Expression)
  Line 64) setTypeArguments(typeArguments) ==> com.github.javaparser.ast.expr.MethodCallExpr.setTypeArguments(java.util.List<com.github.javaparser.ast.type.Type<?>>)
  Line 65) setName(name) ==> com.github.javaparser.ast.expr.MethodCallExpr.setName(java.lang.String)
  Line 66) setArgs(args) ==> com.github.javaparser.ast.expr.MethodCallExpr.setArgs(java.util.List<com.github.javaparser.ast.expr.Expression>)
  Line 76) getArgs().add(arg) ==> java.util.List.add(E)
  Line 76) getArgs() ==> com.github.javaparser.ast.expr.MethodCallExpr.getArgs()
  Line 77) arg.setParentNode(this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 82) addArgument(new NameExpr(arg)) ==> com.github.javaparser.ast.expr.MethodCallExpr.addArgument(com.github.javaparser.ast.expr.Expression)
  Line 813) _n.getArgs() ==> com.github.javaparser.ast.expr.ObjectCreationExpr.getArgs()
  Line 87) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)
  Line 177) name.getName() ==> com.github.javaparser.ast.expr.NameExpr.getName()
  Line 186) ensureNotNull(parameters) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 192) ensureNotNull(throws_) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 198) wrapInArrayTypes(getElementType(), getArrayBracketPairsAfterElementType(), getArrayBracketPairsAfterParameterList()) ==> com.github.javaparser.ast.type.ArrayType.wrapInArrayTypes(com.github.javaparser.ast.type.Type, java.util.List<com.github.javaparser.ast.ArrayBracketPair>...)
  Line 198) getElementType() ==> com.github.javaparser.ast.body.MethodDeclaration.getElementType()
  Line 814) visit(_n.getAnonymousClassBody(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 814) _n.getAnonymousClassBody() ==> com.github.javaparser.ast.expr.ObjectCreationExpr.getAnonymousClassBody()
  Line 815) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 815) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 199) getArrayBracketPairsAfterElementType() ==> com.github.javaparser.ast.body.MethodDeclaration.getArrayBracketPairsAfterElementType()
  Line 818) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 200) getArrayBracketPairsAfterParameterList() ==> com.github.javaparser.ast.body.MethodDeclaration.getArrayBracketPairsAfterParameterList()
  Line 821) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 827) cloneNodes(_n.getQualifier(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 209) ensureNotNull(typeParameters) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 827) _n.getQualifier() ==> com.github.javaparser.ast.expr.QualifiedNameExpr.getQualifier()
  Line 828) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 828) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 216) setAsParentNodeOf(this.body) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 831) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 832) _n.getName() ==> com.github.javaparser.ast.expr.NameExpr.getName()
  Line 228) setNameExpr(new NameExpr(name)) ==> com.github.javaparser.ast.body.MethodDeclaration.setNameExpr(com.github.javaparser.ast.expr.NameExpr)
  Line 834) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 840) cloneNodes(_n.getClassExpr(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 840) _n.getClassExpr() ==> com.github.javaparser.ast.expr.ThisExpr.getClassExpr()
  Line 234) setAsParentNodeOf(this.name) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 841) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 841) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 844) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 847) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 241) setAsParentNodeOf(this.parameters) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 853) cloneNodes(_n.getClassExpr(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 853) _n.getClassExpr() ==> com.github.javaparser.ast.expr.SuperExpr.getClassExpr()
  Line 92) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)
  Line 96) ensureNotNull(args) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 854) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 101) name.getName() ==> com.github.javaparser.ast.expr.NameExpr.getName()
  Line 854) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 857) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 248) setAsParentNodeOf(this.throws_) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 860) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 114) setAsParentNodeOf(this.args) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 254) unwrapArrayTypes(type) ==> com.github.javaparser.ast.type.ArrayType.unwrapArrayTypes(com.github.javaparser.ast.type.Type)
  Line 118) setNameExpr(new NameExpr(name)) ==> com.github.javaparser.ast.expr.MethodCallExpr.setNameExpr(com.github.javaparser.ast.expr.NameExpr)
  Line 866) cloneNodes(_n.getExpr(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 866) _n.getExpr() ==> com.github.javaparser.ast.expr.UnaryExpr.getExpr()
  Line 124) setAsParentNodeOf(this.name) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 867) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 867) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 870) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 871) _n.getOperator() ==> com.github.javaparser.ast.expr.UnaryExpr.getOperator()
  Line 130) setAsParentNodeOf(this.scope) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 255) setElementType(typeListPair.a) ==> com.github.javaparser.ast.body.MethodDeclaration.setElementType(com.github.javaparser.ast.type.Type)
  Line 873) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 142) setAsParentNodeOf(this.typeArguments) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
