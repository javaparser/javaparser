  Line 58) setIdentifier(identifier) ==> com.github.javaparser.ast.expr.MethodReferenceExpr.setIdentifier(java.lang.String)
  Line 59) setScope(scope) ==> com.github.javaparser.ast.expr.MethodReferenceExpr.setScope(com.github.javaparser.ast.expr.Expression)
  Line 257) setArrayBracketPairsAfterParameterList(null) ==> com.github.javaparser.ast.body.MethodDeclaration.setArrayBracketPairsAfterParameterList(java.util.List<com.github.javaparser.ast.ArrayBracketPair>)
  Line 60) setTypeArguments(typeArguments) ==> com.github.javaparser.ast.expr.MethodReferenceExpr.setTypeArguments(java.util.List<com.github.javaparser.ast.type.Type<?>>)
  Line 264) setAsParentNodeOf(this.elementType) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 270) setAsParentNodeOf(typeParameters) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 285) getDeclarationAsString(true, true, true) ==> com.github.javaparser.ast.body.MethodDeclaration.getDeclarationAsString(boolean, boolean, boolean)
  Line 290) getDeclarationAsString(includingModifiers, includingThrows, true) ==> com.github.javaparser.ast.body.MethodDeclaration.getDeclarationAsString(boolean, boolean, boolean)
  Line 307) Modifier.getAccessSpecifier(getModifiers()) ==> com.github.javaparser.ast.Modifier.getAccessSpecifier(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 307) getModifiers() ==> com.github.javaparser.ast.body.MethodDeclaration.getModifiers()
  Line 308) sb.append(accessSpecifier.getCodeRepresenation()) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 308) accessSpecifier.getCodeRepresenation() ==> com.github.javaparser.ast.AccessSpecifier.getCodeRepresenation()
  Line 309) sb.append(accessSpecifier == AccessSpecifier.DEFAULT ? "" : " ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 310) getModifiers().contains(Modifier.STATIC) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 310) getModifiers() ==> com.github.javaparser.ast.body.MethodDeclaration.getModifiers()
  Line 311) sb.append("static ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 313) getModifiers().contains(Modifier.ABSTRACT) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 313) getModifiers() ==> com.github.javaparser.ast.body.MethodDeclaration.getModifiers()
  Line 314) sb.append("abstract ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 316) getModifiers().contains(Modifier.FINAL) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 316) getModifiers() ==> com.github.javaparser.ast.body.MethodDeclaration.getModifiers()
  Line 317) sb.append("final ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 319) getModifiers().contains(Modifier.NATIVE) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 319) getModifiers() ==> com.github.javaparser.ast.body.MethodDeclaration.getModifiers()
  Line 320) sb.append("native ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 322) getModifiers().contains(Modifier.SYNCHRONIZED) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 322) getModifiers() ==> com.github.javaparser.ast.body.MethodDeclaration.getModifiers()
  Line 323) sb.append("synchronized ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 327) sb.append(getElementType().toStringWithoutComments()) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 327) getElementType().toStringWithoutComments() ==> com.github.javaparser.ast.Node.toStringWithoutComments()
  Line 327) getElementType() ==> com.github.javaparser.ast.body.MethodDeclaration.getElementType()
  Line 328) sb.append(" ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 329) sb.append(getName()) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 329) getName() ==> com.github.javaparser.ast.body.MethodDeclaration.getName()
  Line 330) sb.append("(") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 332) getParameters() ==> com.github.javaparser.ast.body.MethodDeclaration.getParameters()
  Line 336) sb.append(", ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 339) sb.append(param.toStringWithoutComments()) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 339) param.toStringWithoutComments() ==> com.github.javaparser.ast.Node.toStringWithoutComments()
  Line 341) sb.append(param.getElementType().toStringWithoutComments()) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 341) param.getElementType().toStringWithoutComments() ==> com.github.javaparser.ast.Node.toStringWithoutComments()
  Line 341) param.getElementType() ==> com.github.javaparser.ast.body.Parameter.getElementType()
  Line 342) param.isVarArgs() ==> com.github.javaparser.ast.body.Parameter.isVarArgs()
  Line 343) sb.append("...") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 347) sb.append(")") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 350) getThrows() ==> com.github.javaparser.ast.body.MethodDeclaration.getThrows()
  Line 66) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)
  Line 353) sb.append(" throws ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 355) sb.append(", ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 357) sb.append(thr.toStringWithoutComments()) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 357) thr.toStringWithoutComments() ==> com.github.javaparser.ast.Node.toStringWithoutComments()
  Line 360) sb.toString() ==> java.lang.StringBuilder.toString()
  Line 365) getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 879) _n.getAnnotations() ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.getAnnotations()
  Line 366) getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 880) cloneNodes(_n.getElementType(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 880) _n.getElementType() ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.getElementType()
  Line 375) ensureNotNull(arrayBracketPairsAfterType) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 382) setAsParentNodeOf(arrayBracketPairsAfterType) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 390) ensureNotNull(arrayBracketPairsAfterParameterList) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 396) setAsParentNodeOf(arrayBracketPairsAfterParameterList) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 71) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)
