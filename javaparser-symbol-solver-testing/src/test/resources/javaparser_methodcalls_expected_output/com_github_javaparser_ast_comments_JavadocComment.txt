  Line 268) ((FieldDeclaration) m).getVariables().stream() ==> java.util.Collection.stream()
  Line 268) ((FieldDeclaration) m).getVariables() ==> com.github.javaparser.ast.body.FieldDeclaration.getVariables()
  Line 299) n.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 301) printTypeParameters(n.getTypeParameters(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printTypeParameters(java.util.List<com.github.javaparser.ast.type.TypeParameter>, java.lang.Object)
  Line 269) var.getId().getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 269) var.getId().getName() ==> com.github.javaparser.ast.body.VariableDeclaratorId.getName()
  Line 269) var.getId() ==> com.github.javaparser.ast.body.VariableDeclarator.getId()
  Line 301) n.getTypeParameters() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getTypeParameters()
  Line 303) isNullOrEmpty(n.getExtends()) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 303) n.getExtends() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtends()
  Line 304) printer.print(" extends ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 305) n.getExtends().iterator() ==> java.util.List.iterator()
  Line 305) n.getExtends() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtends()
  Line 305) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 306) i.next() ==> java.util.Iterator.next()
  Line 279) unmodifiableList(getMembers().stream().filter(m -> m instanceof FieldDeclaration).map(m -> (FieldDeclaration) m).collect(toList())) ==> java.util.Collections.unmodifiableList(java.util.List<? extends T>)
  Line 279) getMembers().stream().filter(m -> m instanceof FieldDeclaration).map(m -> (FieldDeclaration) m).collect(toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 279) getMembers().stream().filter(m -> m instanceof FieldDeclaration).map(m -> (FieldDeclaration) m) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 279) getMembers().stream().filter(m -> m instanceof FieldDeclaration) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 279) getMembers().stream() ==> java.util.Collection.stream()
  Line 279) getMembers() ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMembers()
  Line 282) toList() ==> java.util.stream.Collectors.toList()
  Line 307) c.accept(this, arg) ==> com.github.javaparser.ast.type.ClassOrInterfaceType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 308) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 47) setAsParentNodeOf(this.componentType) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 60) arrayBracketPairList.size() ==> java.util.List.size()
  Line 309) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 61) arrayBracketPairList.get(j).getAnnotations() ==> com.github.javaparser.ast.ArrayBracketPair.getAnnotations()
  Line 61) arrayBracketPairList.get(j) ==> java.util.List.get(int)
  Line 77) arrayBracketPairs.add(new ArrayBracketPair(Range.UNKNOWN, arrayType.getAnnotations())) ==> java.util.List.add(E)
  Line 314) isNullOrEmpty(n.getImplements()) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 77) arrayType.getAnnotations() ==> com.github.javaparser.ast.type.Type.getAnnotations()
  Line 78) arrayType.getComponentType() ==> com.github.javaparser.ast.type.ArrayType.getComponentType()
  Line 84) Arrays.asList(annotations) ==> java.util.Arrays.asList(T...)
  Line 314) n.getImplements() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplements()
  Line 46) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, A)
  Line 131) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)
