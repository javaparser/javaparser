  Line 29) assertNotNull(commentsCollection) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 30) assertNotNull(result) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 31) assertNotNull(problems) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 32) assertNotNull(tokens) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 39) Optional.empty() ==> java.util.Optional.empty()
  Line 39) singletonList(new Problem(throwable.getMessage(), Optional.empty(), Optional.of(throwable))) ==> java.util.Collections.singletonList(T)
  Line 31) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 35) getModifiers().contains(Modifier.ABSTRACT) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 35) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 39) throwable.getMessage() ==> java.lang.Throwable.getMessage()
  Line 39) Optional.empty() ==> java.util.Optional.empty()
  Line 39) Optional.of(throwable) ==> java.util.Optional.of(T)
  Line 39) Optional.empty() ==> java.util.Optional.empty()
  Line 39) Optional.empty() ==> java.util.Optional.empty()
  Line 39) getModifiers().contains(Modifier.FINAL) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 39) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 43) getModifiers().contains(Modifier.NATIVE) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 43) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 47) getModifiers().contains(Modifier.PRIVATE) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 47) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 51) getModifiers().contains(Modifier.PROTECTED) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 51) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 55) getModifiers().contains(Modifier.PUBLIC) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 55) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 59) getModifiers().contains(Modifier.STRICTFP) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 59) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 63) getModifiers().contains(Modifier.SYNCHRONIZED) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 63) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 67) getModifiers().contains(Modifier.TRANSIENT) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 67) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 71) getModifiers().contains(Modifier.VOLATILE) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 71) getModifiers() ==> com.github.javaparser.ast.nodeTypes.NodeWithModifiers.getModifiers()
  Line 92) setVariables(variables) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 46) problems.isEmpty() ==> java.util.List.isEmpty()
