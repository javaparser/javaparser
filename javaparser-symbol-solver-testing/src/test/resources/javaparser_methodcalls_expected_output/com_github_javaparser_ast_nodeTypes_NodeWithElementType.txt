  Line 130) container.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 130) contained.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 166) node.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 65) ((Node) this).tryAddImportToParentCompilationUnit(typeClass) ==> com.github.javaparser.ast.Node.tryAddImportToParentCompilationUnit(java.lang.Class<?>)
  Line 240) new JavaParser(new ParserConfiguration()).parse(context, provider) ==> com.github.javaparser.JavaParser.parse(com.github.javaparser.ParseStart<N>, com.github.javaparser.Provider)
  Line 142) isNullOrEmpty(annotations) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 241) result.isSuccessful() ==> com.github.javaparser.ParseResult.isSuccessful()
  Line 242) result.getResult().get() ==> java.util.Optional.get()
  Line 242) result.getResult() ==> com.github.javaparser.ParseResult.getResult()
  Line 244) result.getProblems() ==> com.github.javaparser.ParseResult.getProblems()
  Line 166) lineComment.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 66) setElementType(new ClassOrInterfaceType(typeClass.getSimpleName())) ==> com.github.javaparser.ast.nodeTypes.NodeWithElementType.setElementType(com.github.javaparser.ast.type.Type<?>)
  Line 79) Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 79) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 66) typeClass.getSimpleName() ==> java.lang.Class.getSimpleName()
  Line 80) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 80) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 115) _n.getImports() ==> com.github.javaparser.ast.CompilationUnit.getImports()
  Line 167) node.hasComment() ==> com.github.javaparser.ast.Node.hasComment()
  Line 82) getMembers().add(fieldDeclaration) ==> java.util.List.add(E)
  Line 82) getMembers() ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMembers()
  Line 144) a.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 145) printer.printLn() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn()
  Line 94) addField(typeClass, name, Modifier.PRIVATE) ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.addField(java.lang.Class<?>, java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 151) isNullOrEmpty(annotations) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 106) addField(type, name, Modifier.PRIVATE) ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.addField(java.lang.String, java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 71) setElementType(classOrInterfaceType) ==> com.github.javaparser.ast.nodeTypes.NodeWithElementType.setElementType(com.github.javaparser.ast.type.Type<?>)
