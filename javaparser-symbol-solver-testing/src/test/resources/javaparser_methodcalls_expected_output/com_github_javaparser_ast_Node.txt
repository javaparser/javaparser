  Line 209) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 209) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 212) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 978) n.getParameters() ==> com.github.javaparser.ast.body.MethodDeclaration.getParameters()
  Line 979) n.getParameters().iterator() ==> java.util.List.iterator()
  Line 214) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 979) n.getParameters() ==> com.github.javaparser.ast.body.MethodDeclaration.getParameters()
  Line 979) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 980) i.next() ==> java.util.Iterator.next()
  Line 981) p.accept(this, arg) ==> com.github.javaparser.ast.body.Parameter.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 982) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 46) a.getBegin().compareTo(b.getBegin()) ==> com.github.javaparser.Position.compareTo(com.github.javaparser.Position)
  Line 46) a.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 983) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 987) printer.print(")") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 46) b.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 121) range.withBegin(begin) ==> com.github.javaparser.Range.withBegin(com.github.javaparser.Position)
  Line 129) range.withEnd(end) ==> com.github.javaparser.Range.withEnd(com.github.javaparser.Position)
  Line 158) this.comment.setCommentedNode(null) ==> com.github.javaparser.ast.comments.Comment.setCommentedNode(com.github.javaparser.ast.Node)
  Line 989) n.getArrayBracketPairsAfterParameterList() ==> com.github.javaparser.ast.body.MethodDeclaration.getArrayBracketPairsAfterParameterList()
  Line 162) this.comment.setCommentedNode(this) ==> com.github.javaparser.ast.comments.Comment.setCommentedNode(com.github.javaparser.ast.Node)
  Line 990) pair.accept(this, arg) ==> com.github.javaparser.ast.ArrayBracketPair.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 993) isNullOrEmpty(n.getThrows()) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 993) n.getThrows() ==> com.github.javaparser.ast.body.MethodDeclaration.getThrows()
  Line 994) printer.print(" throws ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 175) setComment(new LineComment(comment)) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 995) n.getThrows().iterator() ==> java.util.List.iterator()
  Line 995) n.getThrows() ==> com.github.javaparser.ast.body.MethodDeclaration.getThrows()
  Line 995) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 996) i.next() ==> java.util.Iterator.next()
  Line 184) setComment(new BlockComment(comment)) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 195) accept(visitor, null) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 196) visitor.getSource() ==> com.github.javaparser.ast.visitor.DumpVisitor.getSource()
  Line 201) accept(visitor, null) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 202) visitor.getSource() ==> com.github.javaparser.ast.visitor.DumpVisitor.getSource()
  Line 207) toString().hashCode() ==> java.lang.String.hashCode()
  Line 207) toString() ==> com.github.javaparser.ast.Node.toString()
  Line 997) name.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 215) EqualsVisitor.equals(this, (Node) obj) ==> com.github.javaparser.ast.visitor.EqualsVisitor.equals(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
  Line 998) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 999) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 220) this.accept(new CloneVisitor(), null) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)
  Line 1003) n.getBody() ==> com.github.javaparser.ast.body.MethodDeclaration.getBody()
  Line 1004) printer.print(";") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1006) printer.print(" ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 231) classType.isAssignableFrom(parent.getClass()) ==> java.lang.Class.isAssignableFrom(java.lang.Class<? extends java.lang.Object>)
  Line 231) parent.getClass() ==> java.lang.Object.getClass()
  Line 1007) n.getBody().accept(this, arg) ==> com.github.javaparser.ast.stmt.BlockStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1007) n.getBody() ==> com.github.javaparser.ast.body.MethodDeclaration.getBody()
  Line 243) range.contains(other.range) ==> com.github.javaparser.Range.contains(com.github.javaparser.Range)
  Line 1013) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 247) orphanComments.add(comment) ==> java.util.List.add(E)
  Line 248) comment.setParentNode(this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 1013) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1014) printAnnotations(n.getAnnotations(), false, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, java.lang.Object)
  Line 1014) n.getAnnotations() ==> com.github.javaparser.ast.body.Parameter.getAnnotations()
  Line 1015) printModifiers(n.getModifiers()) ==> com.github.javaparser.ast.visitor.DumpVisitor.printModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 276) comments.addAll(getOrphanComments()) ==> java.util.List.addAll(java.util.Collection<? extends E>)
  Line 276) getOrphanComments() ==> com.github.javaparser.ast.Node.getOrphanComments()
  Line 220) visit(_n.getAnnotations(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 1015) n.getModifiers() ==> com.github.javaparser.ast.body.Parameter.getModifiers()
  Line 278) getChildrenNodes() ==> com.github.javaparser.ast.Node.getChildrenNodes()
  Line 1016) n.getElementType() ==> com.github.javaparser.ast.body.Parameter.getElementType()
  Line 279) child.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 220) _n.getAnnotations() ==> com.github.javaparser.ast.body.BodyDeclaration.getAnnotations()
  Line 1017) n.getElementType().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 280) comments.add(child.getComment()) ==> java.util.List.add(E)
  Line 84) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, A)
  Line 101) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, A)
