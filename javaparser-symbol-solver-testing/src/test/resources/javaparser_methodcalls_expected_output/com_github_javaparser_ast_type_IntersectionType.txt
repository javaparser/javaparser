  Line 28) setElements(elements) ==> com.github.javaparser.ast.type.IntersectionType.setElements(java.util.List<com.github.javaparser.ast.type.ReferenceType>)
  Line 713) n.getType() ==> com.github.javaparser.ast.expr.CastExpr.getType()
  Line 714) printer.print(") ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 210) setPackage(new PackageDeclaration(name(name))) ==> com.github.javaparser.ast.CompilationUnit.setPackage(com.github.javaparser.ast.PackageDeclaration)
  Line 210) name(name) ==> com.github.javaparser.ast.expr.NameExpr.name(java.lang.String)
  Line 222) addImport(name, false, false) ==> com.github.javaparser.ast.CompilationUnit.addImport(java.lang.String, boolean, boolean)
  Line 139) setAsParentNodeOf(type) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 233) ClassUtils.isPrimitiveOrWrapper(clazz) ==> com.github.javaparser.utils.ClassUtils.isPrimitiveOrWrapper(java.lang.Class<?>)
  Line 145) getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 146) getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 715) n.getExpr().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 33) setElements(elements) ==> com.github.javaparser.ast.type.IntersectionType.setElements(java.util.List<com.github.javaparser.ast.type.ReferenceType>)
  Line 233) clazz.getName().startsWith("java.lang") ==> java.lang.String.startsWith(java.lang.String)
