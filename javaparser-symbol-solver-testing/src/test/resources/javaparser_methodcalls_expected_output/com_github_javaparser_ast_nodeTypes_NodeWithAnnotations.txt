  Line 43) collection.isEmpty() ==> java.util.Collection.isEmpty()
  Line 13) primitiveWrapperMap.put(Byte.TYPE, Byte.class) ==> java.util.Map.put(K, V)
  Line 24) setAnnotations(annotations) ==> com.github.javaparser.ast.type.Type.setAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>)
  Line 29) setComponentType(componentType) ==> com.github.javaparser.ast.type.ArrayType.setComponentType(com.github.javaparser.ast.type.Type)
  Line 50) addField(typeClass.getSimpleName(), name, modifiers) ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.addField(java.lang.String, java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 92) makeIndent() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.makeIndent()
  Line 47) setMessage(msg) ==> com.github.javaparser.ast.stmt.AssertStmt.setMessage(com.github.javaparser.ast.expr.Expression)
  Line 53) setCheck(check) ==> com.github.javaparser.ast.stmt.AssertStmt.setCheck(com.github.javaparser.ast.expr.Expression)
  Line 50) typeClass.getSimpleName() ==> java.lang.Class.getSimpleName()
  Line 54) setMessage(msg) ==> com.github.javaparser.ast.stmt.AssertStmt.setMessage(com.github.javaparser.ast.expr.Expression)
  Line 95) buf.append(arg) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 30) setAnnotations(annotations) ==> com.github.javaparser.ast.type.Type.setAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>)
  Line 114) _n.getPackage() ==> com.github.javaparser.ast.CompilationUnit.getPackage()
  Line 50) Collections.sort(nodes, (o1, o2) -> PositionUtils.compare(o1, o2, ignoringAnnotations)) ==> java.util.Collections.sort(java.util.List<T>, java.util.Comparator<? super T>)
  Line 14) primitiveWrapperMap.put(Character.TYPE, Character.class) ==> java.util.Map.put(K, V)
  Line 15) primitiveWrapperMap.put(Short.TYPE, Short.class) ==> java.util.Map.put(K, V)
  Line 90) getParserForProvider(provider) ==> com.github.javaparser.JavaParser.getParserForProvider(com.github.javaparser.Provider)
  Line 63) cu.getChildrenNodes() ==> com.github.javaparser.ast.Node.getChildrenNodes()
  Line 91) start.parse(parser) ==> com.github.javaparser.ParseStart.parse(com.github.javaparser.ASTParser)
  Line 99) print(arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 100) printLn() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn()
  Line 16) primitiveWrapperMap.put(Integer.TYPE, Integer.class) ==> java.util.Map.put(K, V)
  Line 58) string.toCharArray() ==> java.lang.String.toCharArray()
  Line 55) name(name) ==> com.github.javaparser.ast.expr.NameExpr.name(java.lang.String)
  Line 67) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 64) PositionUtils.sortByBeginPosition(children) ==> com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)
  Line 92) astParser.getCommentsCollection() ==> com.github.javaparser.ASTParser.getCommentsCollection()
  Line 66) comments.iterator().next() ==> java.util.Iterator.next()
  Line 104) buf.append(EOL) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 93) commentsInserter.insertComments(resultNode, comments.copy().getComments()) ==> com.github.javaparser.CommentsInserter.insertComments(com.github.javaparser.ast.Node, java.util.TreeSet<com.github.javaparser.ast.comments.Comment>)
  Line 17) primitiveWrapperMap.put(Long.TYPE, Long.class) ==> java.util.Map.put(K, V)
  Line 66) comments.iterator() ==> java.util.TreeSet.iterator()
  Line 61) escapedString.append("\\n") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 56) getAnnotations().add(normalAnnotationExpr) ==> java.util.List.add(E)
  Line 50) PositionUtils.compare(o1, o2, ignoringAnnotations) ==> com.github.javaparser.utils.PositionUtils.compare(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)
  Line 68) setVariables(singletonList(new VariableDeclarator(variableName))) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 62) addField(new ClassOrInterfaceType(type), name, modifiers) ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.addField(com.github.javaparser.ast.type.Type<?>, java.lang.String, com.github.javaparser.ast.Modifier...)
