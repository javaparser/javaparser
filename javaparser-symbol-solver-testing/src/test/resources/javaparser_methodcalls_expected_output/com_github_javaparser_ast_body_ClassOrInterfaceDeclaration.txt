  Line 60) setInterface(isInterface) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setInterface(boolean)
  Line 728) n.getCondition().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 728) n.getCondition() ==> com.github.javaparser.ast.expr.ConditionalExpr.getCondition()
  Line 729) printer.print(" ? ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 71) setInterface(isInterface) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setInterface(boolean)
  Line 251) i.getName().toString() ==> com.github.javaparser.ast.Node.toString()
  Line 72) setTypeParameters(typeParameters) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setTypeParameters(java.util.List<com.github.javaparser.ast.type.TypeParameter>)
  Line 73) setExtends(extendsList) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setExtends(java.util.List<com.github.javaparser.ast.type.ClassOrInterfaceType>)
  Line 251) i.getName() ==> com.github.javaparser.ast.ImportDeclaration.getName()
  Line 730) n.getThenExpr().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 730) n.getThenExpr() ==> com.github.javaparser.ast.expr.ConditionalExpr.getThenExpr()
  Line 731) printer.print(" : ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 74) setImplements(implementsList) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setImplements(java.util.List<com.github.javaparser.ast.type.ClassOrInterfaceType>)
  Line 85) setInterface(isInterface) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setInterface(boolean)
  Line 86) setTypeParameters(typeParameters) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setTypeParameters(java.util.List<com.github.javaparser.ast.type.TypeParameter>)
  Line 254) name(name) ==> com.github.javaparser.ast.expr.NameExpr.name(java.lang.String)
  Line 256) getImports().add(importDeclaration) ==> java.util.List.add(E)
  Line 256) getImports() ==> com.github.javaparser.ast.CompilationUnit.getImports()
  Line 87) setExtends(extendsList) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setExtends(java.util.List<com.github.javaparser.ast.type.ClassOrInterfaceType>)
  Line 88) setImplements(implementsList) ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setImplements(java.util.List<com.github.javaparser.ast.type.ClassOrInterfaceType>)
  Line 732) n.getElseExpr().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 732) n.getElseExpr() ==> com.github.javaparser.ast.expr.ConditionalExpr.getElseExpr()
  Line 737) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 737) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 738) printer.print("(") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 739) n.getInner() ==> com.github.javaparser.ast.expr.EnclosedExpr.getInner()
  Line 257) importDeclaration.setParentNode(this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 269) addClass(name, Modifier.PUBLIC) ==> com.github.javaparser.ast.CompilationUnit.addClass(java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 740) n.getInner().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 740) n.getInner() ==> com.github.javaparser.ast.expr.EnclosedExpr.getInner()
  Line 742) printer.print(")") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 747) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 281) Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 281) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 282) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 282) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 747) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 284) getTypes().add(classOrInterfaceDeclaration) ==> java.util.List.add(E)
  Line 284) getTypes() ==> com.github.javaparser.ast.CompilationUnit.getTypes()
  Line 180) _n.getMembers() ==> com.github.javaparser.ast.body.TypeDeclaration.getMembers()
  Line 285) classOrInterfaceDeclaration.setParentNode(this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 181) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 296) addInterface(name, Modifier.PUBLIC) ==> com.github.javaparser.ast.CompilationUnit.addInterface(java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 748) n.getScope().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 748) n.getScope() ==> com.github.javaparser.ast.expr.FieldAccessExpr.getScope()
  Line 749) printer.print(".") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 181) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 308) Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 184) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 308) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 309) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 309) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 750) printer.print(n.getField()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 750) n.getField() ==> com.github.javaparser.ast.expr.FieldAccessExpr.getField()
  Line 311) getTypes().add(classOrInterfaceDeclaration) ==> java.util.List.add(E)
  Line 185) _n.getModifiers() ==> com.github.javaparser.ast.body.TypeDeclaration.getModifiers()
  Line 755) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 185) _n.isInterface() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface()
  Line 755) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 311) getTypes() ==> com.github.javaparser.ast.CompilationUnit.getTypes()
  Line 185) _n.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 187) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 312) classOrInterfaceDeclaration.setParentNode(this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 323) addEnum(name, Modifier.PUBLIC) ==> com.github.javaparser.ast.CompilationUnit.addEnum(java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 334) Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 334) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 335) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 335) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 336) getTypes().add(enumDeclaration) ==> java.util.List.add(E)
  Line 336) getTypes() ==> com.github.javaparser.ast.CompilationUnit.getTypes()
  Line 756) n.getExpr().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 756) n.getExpr() ==> com.github.javaparser.ast.expr.InstanceOfExpr.getExpr()
  Line 757) printer.print(" instanceof ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 337) enumDeclaration.setParentNode(this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 348) addAnnotationDeclaration(name, Modifier.PUBLIC) ==> com.github.javaparser.ast.CompilationUnit.addAnnotationDeclaration(java.lang.String, com.github.javaparser.ast.Modifier...)
  Line 758) n.getType().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 758) n.getType() ==> com.github.javaparser.ast.expr.InstanceOfExpr.getType()
  Line 359) Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 359) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 763) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 360) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 763) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 360) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 764) printer.print("'") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 765) printer.print(n.getValue()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 765) n.getValue() ==> com.github.javaparser.ast.expr.StringLiteralExpr.getValue()
  Line 766) printer.print("'") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 361) getTypes().add(annotationDeclaration) ==> java.util.List.add(E)
  Line 361) getTypes() ==> com.github.javaparser.ast.CompilationUnit.getTypes()
  Line 362) annotationDeclaration.setParentNode(this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 771) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 771) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 373) getTypes().stream().filter(type -> type.getName().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration) type).isInterface()).findFirst().orElse(null) ==> java.util.Optional.orElse(T)
  Line 373) getTypes().stream().filter(type -> type.getName().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration) type).isInterface()).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 772) printer.print(n.getValue()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 373) getTypes().stream().filter(type -> type.getName().equals(className) && type instanceof ClassOrInterfaceDeclaration && !((ClassOrInterfaceDeclaration) type).isInterface()) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 373) getTypes().stream() ==> java.util.Collection.stream()
  Line 373) getTypes() ==> com.github.javaparser.ast.CompilationUnit.getTypes()
  Line 772) n.getValue() ==> com.github.javaparser.ast.expr.StringLiteralExpr.getValue()
  Line 777) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 777) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 373) type.getName().equals(className) ==> java.lang.String.equals(java.lang.Object)
  Line 778) printer.print(n.getValue()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 373) type.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 374) ((ClassOrInterfaceDeclaration) type).isInterface() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface()
  Line 385) getTypes().stream().filter(type -> type.getName().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration) type).isInterface()).findFirst().orElse(null) ==> java.util.Optional.orElse(T)
  Line 385) getTypes().stream().filter(type -> type.getName().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration) type).isInterface()).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 778) n.getValue() ==> com.github.javaparser.ast.expr.StringLiteralExpr.getValue()
  Line 783) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 385) getTypes().stream().filter(type -> type.getName().equals(interfaceName) && type instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration) type).isInterface()) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 385) getTypes().stream() ==> java.util.Collection.stream()
  Line 783) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 385) getTypes() ==> com.github.javaparser.ast.CompilationUnit.getTypes()
  Line 784) printer.print(n.getValue()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 784) n.getValue() ==> com.github.javaparser.ast.expr.StringLiteralExpr.getValue()
  Line 385) type.getName().equals(interfaceName) ==> java.lang.String.equals(java.lang.Object)
  Line 385) type.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 789) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 789) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 790) printer.print(n.getValue()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 790) n.getValue() ==> com.github.javaparser.ast.expr.StringLiteralExpr.getValue()
  Line 795) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 386) ((ClassOrInterfaceDeclaration) type).isInterface() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface()
  Line 397) getTypes().stream().filter(type -> type.getName().equals(enumName) && type instanceof EnumDeclaration).findFirst().orElse(null) ==> java.util.Optional.orElse(T)
  Line 397) getTypes().stream().filter(type -> type.getName().equals(enumName) && type instanceof EnumDeclaration).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 397) getTypes().stream().filter(type -> type.getName().equals(enumName) && type instanceof EnumDeclaration) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 397) getTypes().stream() ==> java.util.Collection.stream()
  Line 397) getTypes() ==> com.github.javaparser.ast.CompilationUnit.getTypes()
  Line 397) type.getName().equals(enumName) ==> java.lang.String.equals(java.lang.Object)
  Line 795) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 796) printer.print(n.getValue()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 796) n.getValue() ==> com.github.javaparser.ast.expr.StringLiteralExpr.getValue()
  Line 397) type.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 409) getTypes().stream().filter(type -> type.getName().equals(annotationName) && type instanceof AnnotationDeclaration).findFirst().orElse(null) ==> java.util.Optional.orElse(T)
  Line 409) getTypes().stream().filter(type -> type.getName().equals(annotationName) && type instanceof AnnotationDeclaration).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 409) getTypes().stream().filter(type -> type.getName().equals(annotationName) && type instanceof AnnotationDeclaration) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 409) getTypes().stream() ==> java.util.Collection.stream()
  Line 801) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 801) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 802) printer.print("\"") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 803) printer.print(n.getValue()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 803) n.getValue() ==> com.github.javaparser.ast.expr.StringLiteralExpr.getValue()
  Line 804) printer.print("\"") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 809) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 409) getTypes() ==> com.github.javaparser.ast.CompilationUnit.getTypes()
  Line 809) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 810) printer.print(String.valueOf(n.getValue())) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 810) String.valueOf(n.getValue()) ==> java.lang.String.valueOf(boolean)
  Line 810) n.getValue() ==> com.github.javaparser.ast.expr.BooleanLiteralExpr.getValue()
  Line 409) type.getName().equals(annotationName) ==> java.lang.String.equals(java.lang.Object)
  Line 193) visit(_n.getAnnotations(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 193) _n.getAnnotations() ==> com.github.javaparser.ast.body.BodyDeclaration.getAnnotations()
  Line 409) type.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 815) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 72) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, A)
  Line 194) visit(_n.getImplements(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 43) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.type.IntersectionType, A)
  Line 93) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)
