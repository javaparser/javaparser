  Line 41) setName(name) ==> com.github.javaparser.ast.expr.ArrayAccessExpr.setName(com.github.javaparser.ast.expr.Expression)
  Line 42) setIndex(index) ==> com.github.javaparser.ast.expr.ArrayAccessExpr.setIndex(com.github.javaparser.ast.expr.Expression)
  Line 47) setName(name) ==> com.github.javaparser.ast.expr.ArrayAccessExpr.setName(com.github.javaparser.ast.expr.Expression)
  Line 48) setIndex(index) ==> com.github.javaparser.ast.expr.ArrayAccessExpr.setIndex(com.github.javaparser.ast.expr.Expression)
  Line 18) primitiveWrapperMap.put(Double.TYPE, Double.class) ==> java.util.Map.put(K, V)
  Line 19) primitiveWrapperMap.put(Float.TYPE, Float.class) ==> java.util.Map.put(K, V)
  Line 93) comments.copy().getComments() ==> com.github.javaparser.ast.comments.CommentsCollection.getComments()
  Line 109) buf.toString() ==> java.lang.StringBuilder.toString()
  Line 114) getSource() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.getSource()
  Line 118) createSourcePrinter() ==> com.github.javaparser.ast.visitor.DumpVisitor.createSourcePrinter()
  Line 93) comments.copy() ==> com.github.javaparser.ast.comments.CommentsCollection.copy()
  Line 125) printer.getSource() ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.getSource()
  Line 20) primitiveWrapperMap.put(Void.TYPE, Void.TYPE) ==> java.util.Map.put(K, V)
  Line 28) primitiveWrapperMap.keySet() ==> java.util.Map.keySet()
  Line 64) escapedString.append("\\r") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 56) getAnnotations() ==> com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.getAnnotations()
  Line 57) normalAnnotationExpr.setParentNode((Node) this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 29) primitiveWrapperMap.get(primitiveClass) ==> java.util.Map.get(java.lang.Object)
  Line 68) ((Node) this).tryAddImportToParentCompilationUnit(clazz) ==> com.github.javaparser.ast.Node.tryAddImportToParentCompilationUnit(java.lang.Class<?>)
  Line 67) cu.getPackage() ==> com.github.javaparser.ast.CompilationUnit.getPackage()
  Line 30) primitiveClass.equals(wrapperClass) ==> java.lang.Object.equals(java.lang.Object)
  Line 68) children.isEmpty() ==> java.util.List.isEmpty()
  Line 31) wrapperPrimitiveMap.put(wrapperClass, primitiveClass) ==> java.util.Map.put(K, V)
  Line 95) Optional.of(resultNode) ==> java.util.Optional.of(T)
  Line 95) Optional.of(astParser.getTokens()) ==> java.util.Optional.of(T)
  Line 68) PositionUtils.areInOrder(firstComment, children.get(0)) ==> com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
  Line 69) children.get(0) ==> java.util.List.get(int)
  Line 129) modifiers.size() ==> java.util.AbstractCollection.size()
  Line 67) escapedString.append(c) ==> java.lang.StringBuilder.append(char)
  Line 54) areInOrder(a, b, false) ==> com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)
  Line 58) compare(a, b, ignoringAnnotations) ==> com.github.javaparser.utils.PositionUtils.compare(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)
  Line 70) cu.setComment(firstComment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 63) signum(beginLineWithoutConsideringAnnotation(a) - beginLineWithoutConsideringAnnotation(b)) ==> java.lang.Integer.signum(int)
  Line 63) beginLineWithoutConsideringAnnotation(a) ==> com.github.javaparser.utils.PositionUtils.beginLineWithoutConsideringAnnotation(com.github.javaparser.ast.Node)
  Line 63) beginLineWithoutConsideringAnnotation(b) ==> com.github.javaparser.utils.PositionUtils.beginLineWithoutConsideringAnnotation(com.github.javaparser.ast.Node)
  Line 71) comments.remove(firstComment) ==> java.util.TreeSet.remove(java.lang.Object)
  Line 95) astParser.getTokens() ==> com.github.javaparser.ASTParser.getTokens()
  Line 69) addAnnotation(clazz.getSimpleName()) ==> com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.addAnnotation(java.lang.String)
  Line 51) type.isPrimitive() ==> java.lang.Class.isPrimitive()
  Line 51) isPrimitiveWrapper(type) ==> com.github.javaparser.utils.ClassUtils.isPrimitiveWrapper(java.lang.Class<?>)
  Line 65) signum(beginColumnWithoutConsideringAnnotation(a) - beginColumnWithoutConsideringAnnotation(b)) ==> java.lang.Integer.signum(int)
  Line 65) beginColumnWithoutConsideringAnnotation(a) ==> com.github.javaparser.utils.PositionUtils.beginColumnWithoutConsideringAnnotation(com.github.javaparser.ast.Node)
  Line 65) beginColumnWithoutConsideringAnnotation(b) ==> com.github.javaparser.utils.PositionUtils.beginColumnWithoutConsideringAnnotation(com.github.javaparser.ast.Node)
  Line 69) clazz.getSimpleName() ==> java.lang.Class.getSimpleName()
  Line 67) wrapperPrimitiveMap.containsKey(type) ==> java.util.Map.containsKey(java.lang.Object)
  Line 95) Optional.of(astParser.getCommentsCollection()) ==> java.util.Optional.of(T)
  Line 80) commentsToAttribute.isEmpty() ==> java.util.TreeSet.isEmpty()
  Line 70) escapedString.toString() ==> java.lang.StringBuilder.toString()
  Line 81) name(name) ==> com.github.javaparser.ast.expr.NameExpr.name(java.lang.String)
  Line 130) printer.print(modifiers.stream().map(Modifier::getLib).collect(Collectors.joining(" ")) + " ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 71) signum(a.getBegin().line - b.getBegin().line) ==> java.lang.Integer.signum(int)
  Line 53) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)
