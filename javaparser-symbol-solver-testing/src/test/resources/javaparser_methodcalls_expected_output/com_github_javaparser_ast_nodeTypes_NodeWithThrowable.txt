  Line 242) printAnnotations(n.getAnnotations(), false, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, java.lang.Object)
  Line 22) getThrows().add(throwType) ==> java.util.List.add(E)
  Line 242) n.getAnnotations() ==> com.github.javaparser.ast.PackageDeclaration.getAnnotations()
  Line 22) getThrows() ==> com.github.javaparser.ast.nodeTypes.NodeWithThrowable.getThrows()
  Line 243) printer.print("package ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 23) throwType.setParentNode((Node) this) ==> com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)
  Line 34) ((Node) this).tryAddImportToParentCompilationUnit(clazz) ==> com.github.javaparser.ast.Node.tryAddImportToParentCompilationUnit(java.lang.Class<?>)
  Line 239) p.getType().toString() ==> com.github.javaparser.ast.Node.toString()
  Line 239) p.getType() ==> com.github.javaparser.ast.body.Parameter.getType()
  Line 240) toSet() ==> java.util.stream.Collectors.toSet()
  Line 35) addThrows(new ClassOrInterfaceType(clazz.getSimpleName())) ==> com.github.javaparser.ast.nodeTypes.NodeWithThrowable.addThrows(com.github.javaparser.ast.type.ReferenceType)
  Line 35) clazz.getSimpleName() ==> java.lang.Class.getSimpleName()
  Line 240) Stream.of(paramTypes).collect(toSet()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 45) isThrows(clazz.getSimpleName()) ==> com.github.javaparser.ast.nodeTypes.NodeWithThrowable.isThrows(java.lang.String)
  Line 240) Stream.of(paramTypes) ==> java.util.stream.Stream.of(T...)
  Line 240) toSet() ==> java.util.stream.Collectors.toSet()
  Line 241) toList() ==> java.util.stream.Collectors.toList()
  Line 45) clazz.getSimpleName() ==> java.lang.Class.getSimpleName()
  Line 55) getThrows().stream().anyMatch(t -> t.toString().equals(throwableName)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 55) getThrows().stream() ==> java.util.Collection.stream()
  Line 55) getThrows() ==> com.github.javaparser.ast.nodeTypes.NodeWithThrowable.getThrows()
  Line 55) t.toString().equals(throwableName) ==> java.lang.String.equals(java.lang.Object)
  Line 252) getMembers().stream().filter(m -> m instanceof MethodDeclaration && ((MethodDeclaration) m).getParameters().stream().map(p -> p.getType().toString()).collect(toSet()).equals(Stream.of(paramTypes).map(Class::getSimpleName).collect(toSet()))).map(m -> (MethodDeclaration) m).collect(toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 252) getMembers().stream().filter(m -> m instanceof MethodDeclaration && ((MethodDeclaration) m).getParameters().stream().map(p -> p.getType().toString()).collect(toSet()).equals(Stream.of(paramTypes).map(Class::getSimpleName).collect(toSet()))).map(m -> (MethodDeclaration) m) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 252) getMembers().stream().filter(m -> m instanceof MethodDeclaration && ((MethodDeclaration) m).getParameters().stream().map(p -> p.getType().toString()).collect(toSet()).equals(Stream.of(paramTypes).map(Class::getSimpleName).collect(toSet()))) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 252) getMembers().stream() ==> java.util.Collection.stream()
  Line 252) getMembers() ==> com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMembers()
  Line 55) t.toString() ==> com.github.javaparser.ast.Node.toString()
