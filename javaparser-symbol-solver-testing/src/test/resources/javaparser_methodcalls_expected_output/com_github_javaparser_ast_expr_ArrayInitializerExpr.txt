  Line 43) setValues(values) ==> com.github.javaparser.ast.expr.ArrayInitializerExpr.setValues(java.util.List<com.github.javaparser.ast.expr.Expression>)
  Line 48) setValues(values) ==> com.github.javaparser.ast.expr.ArrayInitializerExpr.setValues(java.util.List<com.github.javaparser.ast.expr.Expression>)
  Line 510) n.getElementType() ==> com.github.javaparser.ast.body.FieldDeclaration.getElementType()
  Line 511) n.getArrayBracketPairsAfterElementType() ==> com.github.javaparser.ast.body.FieldDeclaration.getArrayBracketPairsAfterElementType()
  Line 512) pair.accept(this, arg) ==> com.github.javaparser.ast.ArrayBracketPair.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 515) printer.print(" ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 516) n.getVariables().iterator() ==> java.util.List.iterator()
  Line 516) n.getVariables() ==> com.github.javaparser.ast.body.FieldDeclaration.getVariables()
  Line 516) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 517) i.next() ==> java.util.Iterator.next()
  Line 177) _n.getTypeParameters() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getTypeParameters()
  Line 518) var.accept(this, arg) ==> com.github.javaparser.ast.body.VariableDeclarator.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 519) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 520) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 524) printer.print(";") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 529) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 529) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 530) n.getId().accept(this, arg) ==> com.github.javaparser.ast.body.VariableDeclaratorId.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 530) n.getId() ==> com.github.javaparser.ast.body.VariableDeclarator.getId()
  Line 531) n.getInit() ==> com.github.javaparser.ast.body.VariableDeclarator.getInit()
  Line 532) printer.print(" = ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 533) n.getInit().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 533) n.getInit() ==> com.github.javaparser.ast.body.VariableDeclarator.getInit()
  Line 539) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 539) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 540) printer.print(n.getName()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 540) n.getName() ==> com.github.javaparser.ast.body.VariableDeclaratorId.getName()
  Line 541) n.getArrayBracketPairsAfterId() ==> com.github.javaparser.ast.body.VariableDeclaratorId.getArrayBracketPairsAfterId()
  Line 542) pair.accept(this, arg) ==> com.github.javaparser.ast.ArrayBracketPair.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 548) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 548) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 549) printer.print("{") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 550) isNullOrEmpty(n.getValues()) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 550) n.getValues() ==> com.github.javaparser.ast.expr.ArrayInitializerExpr.getValues()
  Line 551) printer.print(" ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 552) n.getValues().iterator() ==> java.util.List.iterator()
  Line 178) visit(_n.getExtends(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 552) n.getValues() ==> com.github.javaparser.ast.expr.ArrayInitializerExpr.getValues()
  Line 552) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 553) i.next() ==> java.util.Iterator.next()
  Line 554) expr.accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 555) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 178) _n.getExtends() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtends()
  Line 556) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 559) printer.print(" ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 561) printer.print("}") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 566) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 566) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 567) printAnnotations(n.getAnnotations(), false, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, java.lang.Object)
  Line 567) n.getAnnotations() ==> com.github.javaparser.ast.type.Type.getAnnotations()
  Line 568) printer.print("void") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 573) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 573) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 574) n.getName().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 574) n.getName() ==> com.github.javaparser.ast.expr.ArrayAccessExpr.getName()
  Line 575) printer.print("[") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 576) n.getIndex().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 576) n.getIndex() ==> com.github.javaparser.ast.expr.ArrayAccessExpr.getIndex()
  Line 577) printer.print("]") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 53) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)
  Line 582) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 582) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 583) printer.print("new ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 584) n.getType().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 584) n.getType() ==> com.github.javaparser.ast.expr.ArrayCreationExpr.getType()
  Line 585) n.getLevels() ==> com.github.javaparser.ast.expr.ArrayCreationExpr.getLevels()
  Line 52) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, A)
  Line 586) level.accept(this, arg) ==> com.github.javaparser.ast.ArrayCreationLevel.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 179) visit(_n.getImplements(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.visit(java.util.List<T>, java.lang.Object)
  Line 56) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.comments.LineComment, A)
  Line 99) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.CompilationUnit, A)
  Line 58) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)
