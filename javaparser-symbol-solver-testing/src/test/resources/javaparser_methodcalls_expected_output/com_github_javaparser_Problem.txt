  Line 16) assertNotNull(message) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 17) assertNotNull(range) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 18) assertNotNull(cause) ==> com.github.javaparser.utils.Utils.assertNotNull(T)
  Line 24) range.ifPresent(r -> str.append(" ").append(r)) ==> java.util.Optional.ifPresent(java.util.function.Consumer<? super T>)
  Line 22) paramClass.getSimpleName() ==> java.lang.Class.getSimpleName()
  Line 108) setModifiers(modifiers) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 181) Arrays.stream(modifiers).collect(toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 197) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 181) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 182) toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 182) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 24) str.append(" ").append(r) ==> java.lang.StringBuilder.append(java.lang.Object)
  Line 198) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 202) printer.print(")") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 24) str.append(" ") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 25) str.toString() ==> java.lang.StringBuilder.toString()
