  Line 1491) n.getPairs().iterator() ==> java.util.List.iterator()
  Line 1491) n.getPairs() ==> com.github.javaparser.ast.expr.NormalAnnotationExpr.getPairs()
  Line 1491) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 1492) i.next() ==> java.util.Iterator.next()
  Line 43) setCondition(condition) ==> com.github.javaparser.ast.expr.ConditionalExpr.setCondition(com.github.javaparser.ast.expr.Expression)
  Line 44) setThenExpr(thenExpr) ==> com.github.javaparser.ast.expr.ConditionalExpr.setThenExpr(com.github.javaparser.ast.expr.Expression)
  Line 45) setElseExpr(elseExpr) ==> com.github.javaparser.ast.expr.ConditionalExpr.setElseExpr(com.github.javaparser.ast.expr.Expression)
  Line 50) setCondition(condition) ==> com.github.javaparser.ast.expr.ConditionalExpr.setCondition(com.github.javaparser.ast.expr.Expression)
  Line 51) setThenExpr(thenExpr) ==> com.github.javaparser.ast.expr.ConditionalExpr.setThenExpr(com.github.javaparser.ast.expr.Expression)
  Line 52) setElseExpr(elseExpr) ==> com.github.javaparser.ast.expr.ConditionalExpr.setElseExpr(com.github.javaparser.ast.expr.Expression)
  Line 1493) m.accept(this, arg) ==> com.github.javaparser.ast.expr.MemberValuePair.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1494) i.hasNext() ==> java.util.Iterator.hasNext()
  Line 1495) printer.print(", ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1499) printer.print(")") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 316) _n.getThrows() ==> com.github.javaparser.ast.body.ConstructorDeclaration.getThrows()
  Line 1504) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 317) cloneNodes(_n.getBody(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 1504) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 317) _n.getBody() ==> com.github.javaparser.ast.body.ConstructorDeclaration.getBody()
  Line 1505) printer.print(n.getName()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 1505) n.getName() ==> com.github.javaparser.ast.expr.MemberValuePair.getName()
  Line 1506) printer.print(" = ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 318) cloneNodes(_n.getComment(), _arg) ==> com.github.javaparser.ast.visitor.CloneVisitor.cloneNodes(T, java.lang.Object)
  Line 318) _n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 321) _n.getRange() ==> com.github.javaparser.ast.Node.getRange()
  Line 322) _n.getModifiers() ==> com.github.javaparser.ast.body.ConstructorDeclaration.getModifiers()
  Line 1507) n.getValue().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 1507) n.getValue() ==> com.github.javaparser.ast.expr.MemberValuePair.getValue()
  Line 1515) printer.print("//") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 322) _n.getName() ==> com.github.javaparser.ast.body.ConstructorDeclaration.getName()
  Line 1516) n.getContent() ==> com.github.javaparser.ast.comments.Comment.getContent()
  Line 1517) tmp.replace('\r', ' ') ==> java.lang.String.replace(char, char)
  Line 1518) tmp.replace('\n', ' ') ==> java.lang.String.replace(char, char)
  Line 56) getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1519) printer.printLn(tmp) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.printLn(java.lang.String)
  Line 1527) printer.print("/*") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 57) getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 1528) printer.print(n.getContent()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 324) r.setComment(comment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 57) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)
