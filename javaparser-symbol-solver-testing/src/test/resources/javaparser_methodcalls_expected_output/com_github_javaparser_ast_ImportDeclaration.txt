  Line 78) setAsterisk(isAsterisk) ==> com.github.javaparser.ast.ImportDeclaration.setAsterisk(boolean)
  Line 815) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 79) setName(name) ==> com.github.javaparser.ast.ImportDeclaration.setName(com.github.javaparser.ast.expr.NameExpr)
  Line 80) setStatic(isStatic) ==> com.github.javaparser.ast.ImportDeclaration.setStatic(boolean)
  Line 86) setAsterisk(isAsterisk) ==> com.github.javaparser.ast.ImportDeclaration.setAsterisk(boolean)
  Line 816) printer.print("null") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 87) setName(name) ==> com.github.javaparser.ast.ImportDeclaration.setName(com.github.javaparser.ast.expr.NameExpr)
  Line 88) setStatic(isStatic) ==> com.github.javaparser.ast.ImportDeclaration.setStatic(boolean)
  Line 821) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 821) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 822) n.getClassExpr() ==> com.github.javaparser.ast.expr.ThisExpr.getClassExpr()
  Line 823) n.getClassExpr().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 823) n.getClassExpr() ==> com.github.javaparser.ast.expr.ThisExpr.getClassExpr()
  Line 824) printer.print(".") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 826) printer.print("this") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 831) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 831) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 832) n.getClassExpr() ==> com.github.javaparser.ast.expr.SuperExpr.getClassExpr()
  Line 833) n.getClassExpr().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 833) n.getClassExpr() ==> com.github.javaparser.ast.expr.SuperExpr.getClassExpr()
  Line 834) printer.print(".") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 836) printer.print("super") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 841) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 841) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 842) n.getScope() ==> com.github.javaparser.ast.expr.MethodCallExpr.getScope()
  Line 843) n.getScope().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 843) n.getScope() ==> com.github.javaparser.ast.expr.MethodCallExpr.getScope()
  Line 844) printer.print(".") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 846) printTypeArgs(n, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printTypeArgs(com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments<?>, java.lang.Object)
  Line 847) printer.print(n.getName()) ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 847) n.getName() ==> com.github.javaparser.ast.expr.MethodCallExpr.getName()
  Line 99) setAsParentNodeOf(this.catchBlock) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 848) printArguments(n.getArgs(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printArguments(java.util.List<com.github.javaparser.ast.expr.Expression>, java.lang.Object)
  Line 848) n.getArgs() ==> com.github.javaparser.ast.expr.MethodCallExpr.getArgs()
  Line 853) printJavaComment(n.getComment(), arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printJavaComment(com.github.javaparser.ast.comments.Comment, java.lang.Object)
  Line 105) setAsParentNodeOf(this.param) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 853) n.getComment() ==> com.github.javaparser.ast.Node.getComment()
  Line 854) n.getScope() ==> com.github.javaparser.ast.expr.ObjectCreationExpr.getScope()
  Line 855) n.getScope().accept(this, arg) ==> com.github.javaparser.ast.Node.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
  Line 855) n.getScope() ==> com.github.javaparser.ast.expr.ObjectCreationExpr.getScope()
  Line 856) printer.print(".") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 859) printer.print("new ") ==> com.github.javaparser.ast.visitor.DumpVisitor.SourcePrinter.print(java.lang.String)
  Line 861) printTypeArgs(n, arg) ==> com.github.javaparser.ast.visitor.DumpVisitor.printTypeArgs(com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments<?>, java.lang.Object)
  Line 117) setAsParentNodeOf(this.catchBlock) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 862) isNullOrEmpty(n.getTypeArguments()) ==> com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)
  Line 77) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, A)
  Line 101) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.ImportDeclaration, A)
