  Line 26) type.asTypeParameter() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter()
  Line 27) typeParameter.declaredOnType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnType()
  Line 28) typeParamValue(typeParameter) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParameterValueProvider.typeParamValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
  Line 29) typeParam.isPresent() ==> java.util.Optional.isPresent()
  Line 30) typeParam.get() ==> java.util.Optional.get()
  Line 35) type.isWildcard() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isWildcard()
  Line 90) methodSolved.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 91) methodSolved.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 35) type.asWildcard().isBounded() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isBounded()
  Line 23) node.getClass() ==> java.lang.Object.getClass()
  Line 35) type.asWildcard() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard()
  Line 36) type.asWildcard().isExtends() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isExtends()
  Line 36) type.asWildcard() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard()
  Line 37) Wildcard.extendsBound(useThisTypeParametersOnTheGivenType(type.asWildcard().getBoundedType())) ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.extendsBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 37) useThisTypeParametersOnTheGivenType(type.asWildcard().getBoundedType()) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParameterValueProvider.useThisTypeParametersOnTheGivenType(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 37) type.asWildcard().getBoundedType() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType()
  Line 37) type.asWildcard() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard()
  Line 103) expectedType.asTypeParameter() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter()
  Line 98) getNumberOfParams() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams()
  Line 106) getNumberOfParams() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams()
  Line 42) getDeclaredMethods() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods()
  Line 109) getParam(getNumberOfParams() - 1).isVariadic() ==> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration.isVariadic()
  Line 109) getParam(getNumberOfParams() - 1) ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int)
  Line 109) getNumberOfParams() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams()
  Line 115) this.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 28) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 43) methods.add(new MethodUsage(methodDeclaration)) ==> java.util.Set.add(E)
  Line 70) entry.getName() ==> java.util.zip.ZipEntry.getName()
  Line 71) entryPathToClassName(entry.getName()) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.entryPathToClassName(java.lang.String)
  Line 71) entry.getName() ==> java.util.zip.ZipEntry.getName()
  Line 44) methodsSignatures.add(methodDeclaration.getSignature()) ==> java.util.Set.add(E)
  Line 72) classpathElements.put(name, new ClasspathElement(jarFile, entry, name)) ==> java.util.Map.put(K, V)
  Line 44) methodDeclaration.getSignature() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getSignature()
  Line 47) getAllAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors()
  Line 88) entryPath.endsWith(".class") ==> java.lang.String.endsWith(java.lang.String)
  Line 48) ancestor.getDeclaredMethods() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getDeclaredMethods()
  Line 91) entryPath.substring(0, entryPath.length() - ".class".length()) ==> java.lang.String.substring(int, int)
  Line 49) mu.getDeclaration().getSignature() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getSignature()
  Line 91) entryPath.length() ==> java.lang.String.length()
  Line 91) ".class".length() ==> java.lang.String.length()
  Line 49) mu.getDeclaration() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getDeclaration()
  Line 50) methodsSignatures.contains(signature) ==> java.util.Set.contains(java.lang.Object)
  Line 116) tp.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 51) methodsSignatures.add(signature) ==> java.util.Set.add(E)
  Line 116) tp.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 117) Optional.of(tp) ==> java.util.Optional.of(T)
  Line 120) declaringType().findTypeParameter(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String)
  Line 120) declaringType() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.declaringType()
  Line 52) methods.add(mu) ==> java.util.Set.add(E)
  Line 92) className.replace('/', '.') ==> java.lang.String.replace(char, char)
  Line 104) matchedParameters.put(expectedType.asTypeParameter().getName(), actualType) ==> java.util.Map.put(K, V)
  Line 28) node.getClass() ==> java.lang.Object.getClass()
  Line 39) Wildcard.superBound(useThisTypeParametersOnTheGivenType(type.asWildcard().getBoundedType())) ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.superBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 92) ContextHelper.resolveTypeVariables(this, methodDeclaration, argumentsTypes) ==> com.github.javaparser.symbolsolver.core.resolution.ContextHelper.resolveTypeVariables(com.github.javaparser.symbolsolver.core.resolution.Context, com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>)
