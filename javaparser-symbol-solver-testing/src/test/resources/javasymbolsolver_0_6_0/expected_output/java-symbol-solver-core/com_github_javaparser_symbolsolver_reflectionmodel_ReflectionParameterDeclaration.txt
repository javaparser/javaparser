  Line 116) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 118) SymbolReference.solved(new JavaParserAnnotationDeclaration((AnnotationDeclaration) type, typeSolver)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 120) type.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 120) type.getClass() ==> java.lang.Object.getClass()
  Line 126) wrappedNode.getImports() ==> com.github.javaparser.ast.CompilationUnit.getImports()
  Line 127) name.indexOf('.') ==> java.lang.String.indexOf(int)
  Line 130) name.substring(0, dotPos) ==> java.lang.String.substring(int, int)
  Line 133) wrappedNode.getImports() ==> com.github.javaparser.ast.CompilationUnit.getImports()
  Line 134) importDecl.isAsterisk() ==> com.github.javaparser.ast.ImportDeclaration.isAsterisk()
  Line 73) ReflectionFactory.typeUsageFor(genericType, typeSolver) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
