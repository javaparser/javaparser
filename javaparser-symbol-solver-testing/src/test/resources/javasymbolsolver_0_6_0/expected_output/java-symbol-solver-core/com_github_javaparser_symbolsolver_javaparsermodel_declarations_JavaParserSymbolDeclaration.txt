  Line 66) typeOfScope.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 69) Optional.empty() ==> java.util.Optional.empty()
  Line 103) expressionStmt.getExpression() ==> com.github.javaparser.ast.stmt.ExpressionStmt.getExpression()
  Line 104) expressionStmt.getExpression() ==> com.github.javaparser.ast.stmt.ExpressionStmt.getExpression()
  Line 80) wrappedNode.getScope().isPresent() ==> java.util.Optional.isPresent()
  Line 80) wrappedNode.getScope() ==> com.github.javaparser.ast.expr.MethodCallExpr.getScope()
  Line 81) wrappedNode.getScope().get() ==> java.util.Optional.get()
  Line 81) wrappedNode.getScope() ==> com.github.javaparser.ast.expr.MethodCallExpr.getScope()
  Line 112) foreachStmt.getVariable() ==> com.github.javaparser.ast.stmt.ForeachStmt.getVariable()
  Line 84) ((NameExpr) scope).getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 84) ((NameExpr) scope).getName() ==> com.github.javaparser.ast.expr.NameExpr.getName()
  Line 85) solveType(className, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 86) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 120) ((ClassOrInterfaceDeclaration) node).isInterface() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface()
  Line 132) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 67) variableDeclarator.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 132) node.getClass() ==> java.lang.Object.getClass()
  Line 67) variableDeclarator.getName() ==> com.github.javaparser.ast.body.VariableDeclarator.getName()
  Line 87) MethodResolutionLogic.solveMethodInType(ref.getCorrespondingDeclaration(), name, argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 72) getParentNode(parameter).getChildNodes() ==> com.github.javaparser.ast.Node.getChildNodes()
