  Line 79) ((ObjectCreationExpr) node).getAnonymousClassBody() ==> com.github.javaparser.ast.expr.ObjectCreationExpr.getAnonymousClassBody()
  Line 41) wrappedNode.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 84) node.getParentNode().isPresent() ==> java.util.Optional.isPresent()
  Line 41) wrappedNode.getName() ==> com.github.javaparser.ast.body.Parameter.getName()
  Line 56) wrappedNode.isVarArgs() ==> com.github.javaparser.ast.body.Parameter.isVarArgs()
  Line 84) node.getParentNode() ==> com.github.javaparser.ast.Node.getParentNode()
  Line 84) node.getParentNode().get() ==> java.util.Optional.get()
  Line 84) node.getParentNode() ==> com.github.javaparser.ast.Node.getParentNode()
  Line 84) node.getParentNode().get().getParentNode().isPresent() ==> java.util.Optional.isPresent()
  Line 84) node.getParentNode().get().getParentNode() ==> com.github.javaparser.ast.Node.getParentNode()
  Line 84) node.getParentNode().get() ==> java.util.Optional.get()
  Line 84) node.getParentNode() ==> com.github.javaparser.ast.Node.getParentNode()
  Line 85) getContext(node.getParentNode().get().getParentNode().get(), typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 85) node.getParentNode().get().getParentNode().get() ==> java.util.Optional.get()
  Line 85) node.getParentNode().get().getParentNode() ==> com.github.javaparser.ast.Node.getParentNode()
  Line 85) node.getParentNode().get() ==> java.util.Optional.get()
  Line 85) node.getParentNode() ==> com.github.javaparser.ast.Node.getParentNode()
  Line 88) getParentNode(node) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 89) ((ObjectCreationExpr) parentNode).getType() ==> com.github.javaparser.ast.expr.ObjectCreationExpr.getType()
  Line 64) wrappedNode.getScope().isPresent() ==> java.util.Optional.isPresent()
  Line 64) wrappedNode.getScope() ==> com.github.javaparser.ast.expr.MethodCallExpr.getScope()
  Line 90) getContext(getParentNode(parentNode), typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 65) JavaParserFacade.get(typeSolver).getType(wrappedNode.getScope().get()) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node)
  Line 90) getParentNode(parentNode) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 65) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 65) wrappedNode.getScope().get() ==> java.util.Optional.get()
  Line 66) JavaParserFacade.get(typeSolver).convert(wrappedNode.getType(), wrappedNode) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.Node)
  Line 65) wrappedNode.getScope() ==> com.github.javaparser.ast.expr.MethodCallExpr.getScope()
  Line 66) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 66) wrappedNode.getType() ==> com.github.javaparser.ast.body.Parameter.getType()
  Line 67) isVariadic() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserParameterDeclaration.isVariadic()
