  Line 71) this.typeDeclaration.getClass() ==> java.lang.Object.getClass()
  Line 80) this.isPrimitive() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive()
  Line 83) other.isVoid() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid()
  Line 83) this.getQualifiedName().equals(Object.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 112) getPackageName() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclaration.getPackageName()
  Line 83) this.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 83) Object.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 74) this.getAllFields().stream().filter(f -> f.getName().equals(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 74) this.getAllFields().stream() ==> java.util.Collection.stream()
  Line 74) this.getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 87) other.isPrimitive() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive()
  Line 74) f.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 74) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 50) decl.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 50) decl.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 88) this.getQualifiedName().equals(Object.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 102) classpathElements.get(name).toCtClass() ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.ClasspathElement.toCtClass()
  Line 88) this.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 88) Object.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 51) SymbolReference.solved(decl) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 102) classpathElements.get(name) ==> java.util.Map.get(java.lang.Object)
  Line 102) getRoot() ==> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.getRoot()
  Line 54) SymbolReference.unsolved(ValueDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
  Line 76) getClass() ==> java.lang.Object.getClass()
  Line 104) SymbolReference.unsolved(ReferenceTypeDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
  Line 76) o.getClass() ==> java.lang.Object.getClass()
  Line 113) tryToSolveType(name) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.tryToSolveType(java.lang.String)
  Line 114) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 115) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 46) ((ReflectionMethodDeclaration) methodDeclaration).resolveTypeVariables(context, parameterTypes) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodDeclaration.resolveTypeVariables(com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 92) isCorrespondingBoxingType(other.describe()) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.isCorrespondingBoxingType(java.lang.String)
  Line 133) jarFile.getInputStream(entry) ==> java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry)
  Line 113) className.substring(getPackageName().length() + 1, className.length()) ==> java.lang.String.substring(int, int)
  Line 75) field.isPresent() ==> java.util.Optional.isPresent()
  Line 68) ((TypeDeclaration<?>) n).getName().getId().equals(typeName) ==> java.lang.String.equals(java.lang.Object)
  Line 80) wrappedNode.equals(that.wrappedNode) ==> com.github.javaparser.ast.Node.equals(java.lang.Object)
  Line 43) node.getClass() ==> java.lang.Object.getClass()
  Line 39) symbols.add(JavaParserSymbolDeclaration.parameter(wrappedNode, typeSolver)) ==> java.util.List.add(E)
