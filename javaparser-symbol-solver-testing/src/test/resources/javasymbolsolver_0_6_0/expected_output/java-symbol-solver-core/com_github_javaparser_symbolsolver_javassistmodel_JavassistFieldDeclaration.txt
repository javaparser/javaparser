  Line 54) getNumberOfParams() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionConstructorDeclaration.getNumberOfParams()
  Line 57) constructor.isVarArgs() ==> java.lang.reflect.Constructor.isVarArgs()
  Line 58) constructor.getParameterCount() ==> java.lang.reflect.Constructor.getParameterCount()
  Line 60) constructor.getParameterTypes() ==> java.lang.reflect.Constructor.getParameterTypes()
  Line 60) constructor.getGenericParameterTypes() ==> java.lang.reflect.Constructor.getGenericParameterTypes()
  Line 65) constructor.getName() ==> java.lang.reflect.Constructor.getName()
  Line 70) ReflectionFactory.modifiersToAccessLevel(constructor.getModifiers()) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int)
  Line 70) constructor.getModifiers() ==> java.lang.reflect.Constructor.getModifiers()
  Line 347) ((JavaParserMethodDeclaration) m1).getWrappedNode() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserMethodDeclaration.getWrappedNode()
  Line 453) node.getClass() ==> java.lang.Object.getClass()
  Line 347) ((JavaParserMethodDeclaration) m2).getWrappedNode() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserMethodDeclaration.getWrappedNode()
  Line 44) JavassistFactory.typeUsageFor(ctField.getType(), typeSolver) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistFactory.typeUsageFor(javassist.CtClass, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 44) ctField.getType() ==> javassist.CtField.getType()
  Line 52) Modifier.isStatic(ctField.getModifiers()) ==> java.lang.reflect.Modifier.isStatic(int)
  Line 52) ctField.getModifiers() ==> javassist.CtField.getModifiers()
  Line 353) s.addAll(methods) ==> java.util.Set.addAll(java.util.Collection<? extends E>)
  Line 458) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 458) node.getClass() ==> java.lang.Object.getClass()
  Line 357) md.getQualifiedSignature() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getQualifiedSignature()
  Line 57) ctField.getName() ==> javassist.CtField.getName()
  Line 75) Arrays.stream(constructor.getTypeParameters()).map((refTp) -> new ReflectionTypeParameter(refTp, false, typeSolver)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 463) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 75) Arrays.stream(constructor.getTypeParameters()).map((refTp) -> new ReflectionTypeParameter(refTp, false, typeSolver)) ==> ERROR
  Line 75) Arrays.stream(constructor.getTypeParameters()) ==> ERROR
  Line 77) JavassistFactory.modifiersToAccessLevel(ctField.getModifiers()) ==> ERROR
  Line 75) constructor.getTypeParameters() ==> java.lang.reflect.Constructor.getTypeParameters()
  Line 75) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 358) usedSignatures.contains(signature) ==> java.util.Set.contains(java.lang.Object)
  Line 128) ImmutableList.<FieldDeclaration>builder().addAll(myFields).addAll(superClassFields).addAll(interfaceFields) ==> com.google.common.collect.ImmutableList.Builder.addAll(java.lang.Iterable<? extends E>)
  Line 77) ctField.getModifiers() ==> javassist.CtField.getModifiers()
  Line 463) node.getClass() ==> java.lang.Object.getClass()
