  Line 210) node.getField().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 210) node.getField() ==> com.github.javaparser.ast.expr.FieldAccessExpr.getField()
  Line 214) typeSolver.tryToSolveType(node.toString()) ==> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.tryToSolveType(java.lang.String)
  Line 214) node.toString() ==> com.github.javaparser.ast.Node.toString()
  Line 215) sref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 216) sref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 219) value.isPresent() ==> java.util.Optional.isPresent()
  Line 126) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 220) value.get().getType() ==> com.github.javaparser.symbolsolver.model.resolution.Value.getType()
  Line 220) value.get() ==> java.util.Optional.get()
  Line 126) jpTypeDeclaration.get() ==> java.util.Optional.get()
  Line 222) node.getField().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 127) typeDeclaration.isClass() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isClass()
  Line 222) node.getField() ==> com.github.javaparser.ast.expr.FieldAccessExpr.getField()
  Line 128) typeDeclaration.asClass() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asClass()
  Line 233) new ReflectionTypeSolver().solveType("java.lang.String") ==> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.solveType(java.lang.String)
  Line 140) String.format("%s.%s", getContainerQualifiedName(), getName()) ==> java.lang.String.format(java.lang.String, java.lang.Object...)
  Line 140) getContainerQualifiedName() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeParameter.getContainerQualifiedName()
  Line 140) getName() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeParameter.getName()
  Line 49) getParentNode(stmt) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 253) node.getValue().toLowerCase().endsWith("f") ==> java.lang.String.endsWith(java.lang.String)
  Line 253) node.getValue().toLowerCase() ==> java.lang.String.toLowerCase()
  Line 253) node.getValue() ==> com.github.javaparser.ast.expr.LiteralStringValueExpr.getValue()
  Line 271) logger.finest("getType on method call " + node) ==> java.util.logging.Logger.finest(java.lang.String)
  Line 273) facade.solveMethodAsUsage(node) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveMethodAsUsage(com.github.javaparser.ast.expr.MethodCallExpr)
  Line 52) getParentNode(stmt) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 274) logger.finest("getType on method call " + node + " resolved to " + ref) ==> java.util.logging.Logger.finest(java.lang.String)
  Line 54) blockStmt.getStatements().size() ==> com.github.javaparser.ast.NodeList.size()
  Line 54) blockStmt.getStatements() ==> com.github.javaparser.ast.nodeTypes.NodeWithStatements.getStatements()
  Line 145) wrappedNode.getTypeBound().stream().map((astB) -> toBound(astB, typeSolver)).collect(Collectors.toList()) ==> ERROR
  Line 145) wrappedNode.getTypeBound().stream().map((astB) -> toBound(astB, typeSolver)) ==> ERROR
  Line 145) wrappedNode.getTypeBound().stream() ==> java.util.Collection.stream()
  Line 145) wrappedNode.getTypeBound() ==> com.github.javaparser.ast.type.TypeParameter.getTypeBound()
  Line 275) logger.finest("getType on method call " + node + " return type is " + ref.returnType()) ==> java.util.logging.Logger.finest(java.lang.String)
  Line 55) blockStmt.getStatements().get(i).equals(stmt) ==> com.github.javaparser.ast.Node.equals(java.lang.Object)
  Line 55) blockStmt.getStatements().get(i) ==> com.github.javaparser.ast.NodeList.get(int)
  Line 275) ref.returnType() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType()
  Line 145) toBound(astB, typeSolver) ==> ERROR
  Line 145) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 55) blockStmt.getStatements() ==> com.github.javaparser.ast.nodeTypes.NodeWithStatements.getStatements()
  Line 276) ref.returnType() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType()
  Line 63) JavaParserFactory.getSymbolDeclarator(blockStmt.getStatements().get(i), typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getSymbolDeclarator(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 282) logger.finest("getType on name expr " + node) ==> java.util.logging.Logger.finest(java.lang.String)
  Line 63) blockStmt.getStatements().get(i) ==> com.github.javaparser.ast.NodeList.get(int)
  Line 63) blockStmt.getStatements() ==> com.github.javaparser.ast.nodeTypes.NodeWithStatements.getStatements()
  Line 64) solveWith(symbolDeclarator, name) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.solveWith(com.github.javaparser.symbolsolver.resolution.SymbolDeclarator, java.lang.String)
  Line 65) symbolReference.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 283) new SymbolSolver(typeSolver).solveSymbolAsValue(node.getName().getId(), node) ==> com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolAsValue(java.lang.String, com.github.javaparser.ast.Node)
  Line 283) node.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 283) node.getName() ==> com.github.javaparser.ast.expr.NameExpr.getName()
  Line 284) value.isPresent() ==> java.util.Optional.isPresent()
  Line 285) node.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 285) node.getName() ==> com.github.javaparser.ast.expr.NameExpr.getName()
  Line 287) value.get().getType() ==> com.github.javaparser.symbolsolver.model.resolution.Value.getType()
  Line 287) value.get() ==> java.util.Optional.get()
  Line 71) JavaParserFactory.getContext(getParentNode(stmt), typeSolver).solveSymbol(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 71) JavaParserFactory.getContext(getParentNode(stmt), typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 149) JavaParserFacade.get(typeSolver).convertToUsage(classOrInterfaceType, classOrInterfaceType) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.Node)
  Line 71) getParentNode(stmt) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 149) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 150) Bound.extendsBound(type) ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.Bound.extendsBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 199) Collections.emptyList() ==> java.util.Collections.emptyList()
  Line 213) wrappedNode.getName() ==> com.github.javaparser.ast.type.TypeParameter.getName()
  Line 213) wrappedNode.getTypeBound() ==> com.github.javaparser.ast.type.TypeParameter.getTypeBound()
  Line 218) getContainer() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserTypeParameter.getContainer()
  Line 75) getParentNode(stmt) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 220) Optional.of((ReferenceTypeDeclaration) container) ==> java.util.Optional.of(T)
  Line 222) Optional.empty() ==> java.util.Optional.empty()
  Line 78) getParentNode(stmt) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 293) facade.convertToUsage(node.getType(), node) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convertToUsage(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.Node)
