  Line 75) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 76) typeOfScope.isArray() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
  Line 327) Optional.empty() ==> java.util.Optional.empty()
  Line 76) name.equals(ARRAY_LENGTH_FIELD_NAME) ==> java.lang.String.equals(java.lang.Object)
  Line 77) Optional.of(new Value(PrimitiveType.INT, ARRAY_LENGTH_FIELD_NAME)) ==> java.util.Optional.of(T)
  Line 79) typeOfScope.isReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
  Line 52) wrappedNode.isInterface() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface()
  Line 80) typeOfScope.asReferenceType().getFieldType(name) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getFieldType(java.lang.String)
  Line 80) typeOfScope.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 63) wrappedNode.getMembers() ==> com.github.javaparser.ast.body.TypeDeclaration.getMembers()
  Line 338) map.keySet() ==> java.util.Map.keySet()
  Line 65) methods.add(new JavaParserMethodDeclaration((com.github.javaparser.ast.body.MethodDeclaration) member, typeSolver)) ==> java.util.Set.add(E)
  Line 81) typeUsage.isPresent() ==> java.util.Optional.isPresent()
  Line 82) Optional.of(new Value(typeUsage.get(), name)) ==> java.util.Optional.of(T)
  Line 82) typeUsage.get() ==> java.util.Optional.get()
  Line 84) Optional.empty() ==> java.util.Optional.empty()
  Line 87) Optional.empty() ==> java.util.Optional.empty()
  Line 90) getParent().solveSymbolAsValue(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbolAsValue(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 90) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 72) JavaParserFactory.getContext(wrappedNode, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 341) keyLambdaExpr.toString().equals(lambdaExpr.toString()) ==> java.lang.String.equals(java.lang.Object)
