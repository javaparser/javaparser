  Line 221) ((ClassDeclaration) classDecl.asReferenceType().getTypeDeclaration()).getConstructors() ==> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getConstructors()
  Line 221) classDecl.asReferenceType().getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 221) classDecl.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 223) placeholder.setMethod(res) ==> com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder.setMethod(com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration>)
  Line 233) argumentTypes.add(placeholder) ==> java.util.List.add(E)
  Line 51) getParentNode(variableDeclarator) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 234) placeholders.add(placeholder) ==> java.util.List.add(E)
  Line 237) argumentTypes.add(JavaParserFacade.get(typeSolver).getType(parameterValue, solveLambdas)) ==> java.util.List.add(E)
  Line 52) getParentNode(variableDeclarator).getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 52) getParentNode(variableDeclarator).getClass() ==> java.lang.Object.getClass()
  Line 237) JavaParserFacade.get(typeSolver).getType(parameterValue, solveLambdas) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node, boolean)
  Line 237) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 241) String.format("Unable to calculate the type of a parameter of a method call. Method call: %s, Parameter: %s", node, parameterValue) ==> java.lang.String.format(java.lang.String, java.lang.Object...)
  Line 52) getParentNode(variableDeclarator) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 256) solveArguments(methodCallExpr, methodCallExpr.getArguments(), solveLambdas, argumentTypes, placeholders) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveArguments(com.github.javaparser.ast.Node, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, boolean, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, java.util.List<com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder>)
  Line 256) methodCallExpr.getArguments() ==> com.github.javaparser.ast.expr.MethodCallExpr.getArguments()
  Line 54) getParentNode(variableDeclarator) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 258) JavaParserFactory.getContext(methodCallExpr, typeSolver).solveMethod(methodCallExpr.getName().getId(), argumentTypes, false, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 258) JavaParserFactory.getContext(methodCallExpr, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 258) methodCallExpr.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 258) methodCallExpr.getName() ==> com.github.javaparser.ast.expr.MethodCallExpr.getName()
  Line 260) placeholder.setMethod(res) ==> com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder.setMethod(com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration>)
  Line 63) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 266) JavaParserFactory.getContext(annotationExpr, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 267) context.solveType(annotationExpr.getNameAsString(), typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 267) annotationExpr.getNameAsString() ==> com.github.javaparser.ast.nodeTypes.NodeWithName.getNameAsString()
  Line 68) getParentNode(enumConstantDeclaration) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 268) typeDeclarationSymbolReference.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 269) typeDeclarationSymbolReference.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 270) SymbolReference.solved(annotationDeclaration) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 272) SymbolReference.unsolved(AnnotationDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
  Line 277) getType(node, true) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node, boolean)
  Line 282) cacheWithLambdasSolved.containsKey(node) ==> java.util.Map.containsKey(java.lang.Object)
  Line 283) getTypeConcrete(node, solveLambdas) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(com.github.javaparser.ast.Node, boolean)
  Line 285) cacheWithLambdasSolved.put(node, res) ==> java.util.Map.put(K, V)
  Line 290) methodCallExpr.getArguments() ==> com.github.javaparser.ast.expr.MethodCallExpr.getArguments()
  Line 291) cacheWithLambdasSolved.containsKey(arg) ==> java.util.Map.containsKey(java.lang.Object)
  Line 63) getParentNode(wrappedNode) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 292) getType(arg, true) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node, boolean)
  Line 298) cacheWithLambdasSolved.remove(node) ==> java.util.Map.remove(java.lang.Object)
  Line 299) cacheWithLambdasSolved.put(node, getType(node, true)) ==> java.util.Map.put(K, V)
  Line 299) getType(node, true) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getType(com.github.javaparser.ast.Node, boolean)
  Line 301) logger.finer("getType on " + node + " -> " + res) ==> java.util.logging.Logger.finer(java.lang.String)
  Line 303) cacheWithLambdasSolved.get(node) ==> java.util.Map.get(java.lang.Object)
  Line 305) find(cacheWithLambdasSolved, node) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.find(java.util.Map<com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.ast.Node)
  Line 306) res.isPresent() ==> java.util.Optional.isPresent()
  Line 71) JavaParserFacade.get(typeSolver).convert(variableDeclarator.getType(), wrappedNode) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.convert(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.Node)
  Line 71) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 307) res.get() ==> java.util.Optional.get()
  Line 71) variableDeclarator.getType() ==> com.github.javaparser.ast.body.VariableDeclarator.getType()
  Line 79) enumConstantDeclaration.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 79) enumConstantDeclaration.getName() ==> com.github.javaparser.ast.body.EnumConstantDeclaration.getName()
  Line 81) variableDeclarator.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 81) variableDeclarator.getName() ==> com.github.javaparser.ast.body.VariableDeclarator.getName()
  Line 87) wrappedNode.getModifiers().contains(Modifier.STATIC) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 87) wrappedNode.getModifiers() ==> com.github.javaparser.ast.body.FieldDeclaration.getModifiers()
  Line 106) getName() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserFieldDeclaration.getName()
  Line 111) Helper.toAccessLevel(wrappedNode.getModifiers()) ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.Helper.toAccessLevel(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 111) wrappedNode.getModifiers() ==> com.github.javaparser.ast.body.FieldDeclaration.getModifiers()
  Line 309) find(cacheWithoutLambdasSolved, node) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.find(java.util.Map<com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.ast.Node)
  Line 310) res.isPresent() ==> java.util.Optional.isPresent()
  Line 311) getTypeConcrete(node, solveLambdas) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeConcrete(com.github.javaparser.ast.Node, boolean)
  Line 312) cacheWithoutLambdasSolved.put(node, resType) ==> java.util.Map.put(K, V)
  Line 116) Navigator.findAncestor(wrappedNode, com.github.javaparser.ast.body.TypeDeclaration.class) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.findAncestor(com.github.javaparser.ast.Node, java.lang.Class<N>)
  Line 117) typeDeclaration.isPresent() ==> java.util.Optional.isPresent()
  Line 313) logger.finer("getType on " + node + " (no solveLambdas) -> " + res) ==> java.util.logging.Logger.finer(java.lang.String)
  Line 316) res.get() ==> java.util.Optional.get()
  Line 321) map.containsKey(node) ==> java.util.Map.containsKey(java.lang.Object)
  Line 68) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver).solveMethod(name, parameterTypes, false, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 68) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 322) Optional.of(map.get(node)) ==> java.util.Optional.of(T)
  Line 322) map.get(node) ==> java.util.Map.get(java.lang.Object)
  Line 68) getParentNode(wrappedNode) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 73) wrappedNode.getScope() ==> com.github.javaparser.ast.expr.FieldAccessExpr.getScope()
  Line 74) wrappedNode.getField().toString().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 74) wrappedNode.getField().toString() ==> com.github.javaparser.ast.Node.toString()
  Line 74) wrappedNode.getField() ==> com.github.javaparser.ast.expr.FieldAccessExpr.getField()
  Line 118) JavaParserFacade.get(typeSolver).getTypeDeclaration(typeDeclaration.get()) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.TypeDeclaration<?>)
  Line 118) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 118) typeDeclaration.get() ==> java.util.Optional.get()
