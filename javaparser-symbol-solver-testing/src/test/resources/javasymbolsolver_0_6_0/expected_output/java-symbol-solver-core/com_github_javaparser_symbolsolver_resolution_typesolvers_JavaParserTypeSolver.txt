  Line 32) Byte.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 100) this.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 100) FunctionalInterface.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 103) compareConsideringTypeParameters(otherRef) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.compareConsideringTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.ReferenceType)
  Line 40) modifiers.contains(Modifier.PUBLIC) ==> java.util.AbstractCollection.contains(java.lang.Object)
  Line 48) getPackageName(container) ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.Helper.getPackageName(com.github.javaparser.ast.Node)
  Line 39) JavaParserSymbolDeclaration.parameter(wrappedNode, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration.parameter(com.github.javaparser.ast.body.Parameter, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 48) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 106) otherRef.getAllAncestors() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors()
  Line 120) ctClass.getName() ==> javassist.CtClass.getName()
  Line 87) wrappedNode.hashCode() ==> com.github.javaparser.ast.Node.hashCode()
  Line 68) ((TypeDeclaration<?>) n).getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 49) getClassName("", container) ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.Helper.getClassName(java.lang.String, com.github.javaparser.ast.Node)
  Line 32) ImmutableList.of() ==> com.google.common.collect.ImmutableList.of()
  Line 72) parsedFiles.containsKey(srcFile.getAbsolutePath()) ==> java.util.Map.containsKey(java.lang.Object)
