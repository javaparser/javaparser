  Line 56) getNumberOfParams() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams()
  Line 39) clazz.getGenericSuperclass() ==> java.lang.Class.getGenericSuperclass()
  Line 71) expectedType.isAssignableBy(actualType) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 58) sb.append(", ") ==> java.lang.StringBuffer.append(java.lang.String)
  Line 15) Boolean.compare(o1.isAnnotation(), o2.isAnnotation()) ==> java.lang.Boolean.compare(boolean, boolean)
  Line 15) o1.isAnnotation() ==> java.lang.Class.isAnnotation()
  Line 15) o2.isAnnotation() ==> java.lang.Class.isAnnotation()
  Line 101) nameToValue.get(qualifiedName) ==> java.util.Map.get(java.lang.Object)
  Line 108) nameToValue.containsKey(signature) ==> java.util.Map.containsKey(java.lang.Object)
  Line 72) constructor.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 60) classPool.appendClassPath(pathToJar) ==> javassist.ClassPool.appendClassPath(java.lang.String)
  Line 73) MethodResolutionLogic.replaceTypeParam(expectedType, tp, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.replaceTypeParam(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 75) expectedType.isAssignableBy(actualType) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 61) classPool.appendSystemPath() ==> javassist.ClassPool.appendSystemPath()
  Line 76) actualType.isArray() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
  Line 67) jarFile.entries() ==> java.util.jar.JarFile.entries()
  Line 77) expectedType.isAssignableBy(actualType.asArrayType().getComponentType()) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 77) actualType.asArrayType().getComponentType() ==> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType()
  Line 77) actualType.asArrayType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType()
  Line 51) Object.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 17) Boolean.compare(o1.isArray(), o2.isArray()) ==> java.lang.Boolean.compare(boolean, boolean)
  Line 17) o1.isArray() ==> java.lang.Class.isArray()
  Line 17) o2.isArray() ==> java.lang.Class.isArray()
  Line 19) Boolean.compare(o1.isEnum(), o2.isEnum()) ==> java.lang.Boolean.compare(boolean, boolean)
  Line 19) o1.isEnum() ==> java.lang.Class.isEnum()
  Line 19) o2.isEnum() ==> java.lang.Class.isEnum()
  Line 21) Boolean.compare(o1.isInterface(), o2.isInterface()) ==> java.lang.Boolean.compare(boolean, boolean)
  Line 21) o1.isInterface() ==> java.lang.Class.isInterface()
  Line 21) o2.isInterface() ==> java.lang.Class.isInterface()
  Line 78) argumentsTypes.set(pos, actualType.asArrayType().getComponentType()) ==> java.util.List.set(int, E)
  Line 78) actualType.asArrayType().getComponentType() ==> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType()
  Line 109) Optional.of(nameToValue.get(signature)) ==> java.util.Optional.of(T)
  Line 109) nameToValue.get(signature) ==> java.util.Map.get(java.lang.Object)
  Line 111) Optional.empty() ==> java.util.Optional.empty()
  Line 116) nameToValue.keySet() ==> java.util.Map.keySet()
  Line 60) sb.append(getParam(i).describeType()) ==> java.lang.StringBuffer.append(java.lang.String)
  Line 60) getParam(i).describeType() ==> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration.describeType()
  Line 60) getParam(i) ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int)
  Line 120) nameToValue.values() ==> java.util.Map.values()
  Line 42) Optional.empty() ==> java.util.Optional.empty()
  Line 46) getParent() ==> com.github.javaparser.symbolsolver.core.resolution.Context.getParent()
  Line 48) SymbolReference.unsolved(ReferenceTypeDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
  Line 128) nameToValue.isEmpty() ==> java.util.Map.isEmpty()
  Line 133) this.nameToDeclaration.values() ==> java.util.Map.values()
  Line 62) sb.append(")") ==> java.lang.StringBuffer.append(java.lang.String)
  Line 63) sb.toString() ==> java.lang.StringBuffer.toString()
  Line 71) declaringType().getId() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId()
  Line 71) declaringType() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.declaringType()
  Line 71) this.getSignature() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getSignature()
  Line 95) getNumberOfParams() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams()
  Line 50) parent.solveType(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 59) solveSymbol(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 134) type.replaceTypeVariables(typeParameterDeclaration, getValue(typeParameterDeclaration), inferredTypes) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 134) getValue(typeParameterDeclaration) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
  Line 60) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 78) actualType.asArrayType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType()
  Line 52) superclasses.add(object()) ==> java.util.List.add(E)
  Line 68) e.hasMoreElements() ==> java.util.Enumeration.hasMoreElements()
  Line 23) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 98) getParam(getNumberOfParams() - 1) ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getParam(int)
