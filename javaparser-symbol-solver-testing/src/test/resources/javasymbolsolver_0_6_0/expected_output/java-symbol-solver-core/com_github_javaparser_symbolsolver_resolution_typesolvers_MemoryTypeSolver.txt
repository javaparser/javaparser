  Line 323) useThisTypeParametersOnTheGivenType(type) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParameterValueProvider.useThisTypeParametersOnTheGivenType(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 324) Optional.of(type) ==> java.util.Optional.of(T)
  Line 205) Collectors.toSet() ==> java.util.stream.Collectors.toSet()
  Line 378) node.getClass() ==> java.lang.Object.getClass()
  Line 294) reflectionClassAdapter.getSuperClass() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getSuperClass()
  Line 51) parent.equals(that.parent) ==> java.lang.Object.equals(java.lang.Object)
  Line 331) typeDeclaration.hasName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.hasName()
  Line 338) typeDeclaration.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 345) typeDeclaration.getId() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId()
  Line 383) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 354) typeDeclaration.getTypeParameters().isEmpty() ==> java.util.List.isEmpty()
  Line 383) node.getClass() ==> java.lang.Object.getClass()
  Line 52) declarationMap.equals(that.declarationMap) ==> java.util.Map.equals(java.lang.Object)
  Line 58) parent.hashCode() ==> java.lang.Object.hashCode()
  Line 59) declarationMap.hashCode() ==> java.util.Map.hashCode()
  Line 74) this.declarationMap.put(name, typeDeclaration) ==> java.util.Map.put(K, V)
  Line 79) declarationMap.containsKey(name) ==> java.util.Map.containsKey(java.lang.Object)
  Line 388) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 299) reflectionClassAdapter.getInterfaces() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getInterfaces()
  Line 311) Wildcard.superBound(bound.getType()) ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.superBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 311) bound.getType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.Bound.getType()
  Line 354) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 355) typeParametersMap().isEmpty() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.isEmpty()
  Line 355) typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 304) clazz.isInterface() ==> java.lang.Class.isInterface()
  Line 358) typeParametersMap().getNames() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getNames()
  Line 388) node.getClass() ==> java.lang.Object.getClass()
  Line 358) typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 309) reflectionClassAdapter.getTypeParameters() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getTypeParameters()
  Line 314) ReflectionFactory.modifiersToAccessLevel(this.clazz.getModifiers()) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int)
  Line 314) this.clazz.getModifiers() ==> java.lang.Class.getModifiers()
  Line 319) reflectionClassAdapter.getConstructors() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getConstructors()
  Line 80) SymbolReference.solved(declarationMap.get(name)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 80) declarationMap.get(name) ==> java.util.Map.get(java.lang.Object)
  Line 82) SymbolReference.unsolved(ReferenceTypeDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
