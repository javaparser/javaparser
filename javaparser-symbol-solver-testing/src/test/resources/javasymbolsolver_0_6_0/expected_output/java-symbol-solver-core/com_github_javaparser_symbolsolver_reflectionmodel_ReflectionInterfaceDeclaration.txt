  Line 79) getClass() ==> java.lang.Object.getClass()
  Line 79) o.getClass() ==> java.lang.Object.getClass()
  Line 83) wrappedNode.equals(that.wrappedNode) ==> com.github.javaparser.ast.Node.equals(java.lang.Object)
  Line 90) wrappedNode.hashCode() ==> com.github.javaparser.ast.Node.hashCode()
  Line 107) wrappedNode.getMembers() ==> com.github.javaparser.ast.body.TypeDeclaration.getMembers()
  Line 267) this.internalTypes().stream().filter(f -> f.getName().endsWith(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 267) this.internalTypes().stream() ==> java.util.Collection.stream()
  Line 267) this.internalTypes() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclaration.internalTypes()
  Line 110) field.getVariables() ==> com.github.javaparser.ast.body.FieldDeclaration.getVariables()
  Line 614) ((JavassistClassDeclaration) typeDeclaration).solveMethod(name, argumentsTypes, staticOnly) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean)
  Line 111) fields.add(new JavaParserFieldDeclaration(vd, typeSolver)) ==> java.util.ArrayList.add(E)
  Line 116) this.getSuperClass().getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 116) this.getSuperClass() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclaration.getSuperClass()
  Line 267) f.getName().endsWith(name) ==> java.lang.String.endsWith(java.lang.String)
  Line 267) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 268) type.orElseThrow(() -> new UnsolvedSymbolException("Internal type not found: " + name)) ==> java.util.Optional.orElseThrow(java.util.function.Supplier<? extends X>)
  Line 118) fields.addAll(superclass.getAllFields()) ==> java.util.ArrayList.addAll(java.util.Collection<? extends E>)
  Line 118) superclass.getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 278) this.internalTypes().stream().anyMatch(f -> f.getName().endsWith(name)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 278) this.internalTypes().stream() ==> java.util.Collection.stream()
  Line 278) this.internalTypes() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclaration.internalTypes()
  Line 120) getInterfaces().forEach(interf -> interf.getTypeDeclaration().getAllFields().forEach(f -> {
    fields.add(f);
})) ==> java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
  Line 120) getInterfaces() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclaration.getInterfaces()
  Line 617) ((JavassistEnumDeclaration) typeDeclaration).solveMethod(name, argumentsTypes, staticOnly) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean)
  Line 278) f.getName().endsWith(name) ==> java.lang.String.endsWith(java.lang.String)
  Line 120) interf.getTypeDeclaration().getAllFields().forEach(f -> {
    fields.add(f);
}) ==> java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
  Line 120) interf.getTypeDeclaration().getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 120) interf.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 278) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 121) fields.add(f) ==> java.util.ArrayList.add(E)
  Line 132) getContext() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclaration.getContext()
  Line 619) typeDeclaration.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 133) ctx.solveMethod(name, parameterTypes, false, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 56) clazz.isInterface() ==> java.lang.Class.isInterface()
  Line 157) solveArguments(explicitConstructorInvocationStmt, explicitConstructorInvocationStmt.getArguments(), solveLambdas, argumentTypes, placeholders) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solveArguments(com.github.javaparser.ast.Node, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, boolean, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, java.util.List<com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder>)
