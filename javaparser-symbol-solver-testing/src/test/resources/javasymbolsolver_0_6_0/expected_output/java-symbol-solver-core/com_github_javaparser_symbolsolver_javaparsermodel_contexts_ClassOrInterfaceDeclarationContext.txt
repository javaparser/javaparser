  Line 81) genericArrayType.getGenericComponentType() ==> java.lang.reflect.GenericArrayType.getGenericComponentType()
  Line 230) new JavassistInterfaceDeclaration(interfaze, typeSolver).solveSymbol(name, typeSolver) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclaration.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 541) winningCandidate.declaringType().getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 541) winningCandidate.declaringType() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.declaringType()
  Line 84) wildcardType.getLowerBounds() ==> java.lang.reflect.WildcardType.getLowerBounds()
  Line 541) other.declaringType().getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 46) getDeclaration() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ClassOrInterfaceDeclarationContext.getDeclaration()
  Line 84) wildcardType.getUpperBounds() ==> java.lang.reflect.WildcardType.getUpperBounds()
  Line 541) other.declaringType() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.declaringType()
  Line 85) wildcardType.getUpperBounds() ==> java.lang.reflect.WildcardType.getUpperBounds()
  Line 231) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 542) areOverride(winningCandidate, other) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.areOverride(com.github.javaparser.symbolsolver.model.methods.MethodUsage, com.github.javaparser.symbolsolver.model.methods.MethodUsage)
  Line 57) this.getDeclaration().hasVisibleField(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String)
  Line 85) wildcardType.getUpperBounds()[0].getTypeName().equals("java.lang.Object") ==> java.lang.String.equals(java.lang.Object)
  Line 85) wildcardType.getUpperBounds()[0].getTypeName() ==> java.lang.reflect.Type.getTypeName()
  Line 57) this.getDeclaration() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ClassOrInterfaceDeclarationContext.getDeclaration()
  Line 239) SymbolReference.unsolved(ValueDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
  Line 543) winningCandidate.declaringType().getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 543) winningCandidate.declaringType() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.declaringType()
  Line 244) javassistTypeDeclarationAdapter.containerType() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter.containerType()
  Line 551) Optional.of(winningCandidate) ==> java.util.Optional.of(T)
  Line 58) SymbolReference.solved(this.getDeclaration().getVisibleField(name)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 85) wildcardType.getUpperBounds() ==> java.lang.reflect.WildcardType.getUpperBounds()
  Line 58) this.getDeclaration().getVisibleField(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String)
  Line 58) this.getDeclaration() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ClassOrInterfaceDeclarationContext.getDeclaration()
  Line 89) wildcardType.getLowerBounds() ==> java.lang.reflect.WildcardType.getLowerBounds()
  Line 90) wildcardType.getLowerBounds() ==> java.lang.reflect.WildcardType.getLowerBounds()
  Line 62) getParent().solveSymbol(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 62) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 69) this.getDeclaration().hasVisibleField(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasVisibleField(java.lang.String)
  Line 69) this.getDeclaration() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ClassOrInterfaceDeclarationContext.getDeclaration()
  Line 556) winningCandidate.getName().equals(other.getName()) ==> java.lang.String.equals(java.lang.Object)
  Line 556) winningCandidate.getName() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getName()
  Line 556) other.getName() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getName()
  Line 559) winningCandidate.getNoParams() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getNoParams()
  Line 70) Optional.of(Value.from(this.getDeclaration().getVisibleField(name))) ==> java.util.Optional.of(T)
  Line 70) Value.from(this.getDeclaration().getVisibleField(name)) ==> com.github.javaparser.symbolsolver.model.resolution.Value.from(com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration)
  Line 70) this.getDeclaration().getVisibleField(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleField(java.lang.String)
  Line 70) this.getDeclaration() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.ClassOrInterfaceDeclarationContext.getDeclaration()
  Line 74) getParent().solveSymbolAsValue(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbolAsValue(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 74) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 559) other.getNoParams() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getNoParams()
  Line 562) winningCandidate.getNoParams() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getNoParams()
  Line 79) wrappedNode.getTypeParameters() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getTypeParameters()
  Line 563) winningCandidate.getParamTypes().get(i).equals(other.getParamTypes().get(i)) ==> java.lang.Object.equals(java.lang.Object)
  Line 563) winningCandidate.getParamTypes().get(i) ==> java.util.List.get(int)
  Line 563) winningCandidate.getParamTypes() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getParamTypes()
  Line 563) other.getParamTypes().get(i) ==> java.util.List.get(int)
  Line 563) other.getParamTypes() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getParamTypes()
  Line 93) Wildcard.superBound(typeUsageFor(wildcardType.getLowerBounds()[0], typeSolver)) ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.superBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 93) typeUsageFor(wildcardType.getLowerBounds()[0], typeSolver) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 93) wildcardType.getLowerBounds() ==> java.lang.reflect.WildcardType.getLowerBounds()
  Line 95) wildcardType.getUpperBounds() ==> java.lang.reflect.WildcardType.getUpperBounds()
  Line 96) wildcardType.getUpperBounds() ==> java.lang.reflect.WildcardType.getUpperBounds()
  Line 571) solveMethodInType(typeDeclaration, name, argumentsTypes, false, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 80) tp.getName().getId().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 80) tp.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 587) ((JavaParserClassDeclaration) typeDeclaration).getContext() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclaration.getContext()
  Line 80) tp.getName() ==> com.github.javaparser.ast.type.TypeParameter.getName()
  Line 81) Optional.of(new TypeVariable(new JavaParserTypeParameter(tp, typeSolver))) ==> java.util.Optional.of(T)
  Line 84) getParent().solveGenericType(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveGenericType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 84) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 588) ctx.solveMethod(name, argumentsTypes, staticOnly, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 591) ((JavaParserInterfaceDeclaration) typeDeclaration).getContext() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserInterfaceDeclaration.getContext()
  Line 185) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 186) Collectors.toSet() ==> java.util.stream.Collectors.toSet()
  Line 99) Wildcard.extendsBound(typeUsageFor(wildcardType.getUpperBounds()[0], typeSolver)) ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.extendsBound(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 99) typeUsageFor(wildcardType.getUpperBounds()[0], typeSolver) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 89) javaParserTypeDeclarationAdapter.solveType(name, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.JavaParserTypeDeclarationAdapter.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 592) ctx.solveMethod(name, argumentsTypes, staticOnly, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 595) name.equals("values") ==> java.lang.String.equals(java.lang.Object)
  Line 94) javaParserTypeDeclarationAdapter.solveMethod(name, argumentsTypes, staticOnly, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.JavaParserTypeDeclarationAdapter.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 595) argumentsTypes.isEmpty() ==> java.util.List.isEmpty()
  Line 98) javaParserTypeDeclarationAdapter.solveConstructor(argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.JavaParserTypeDeclarationAdapter.solveConstructor(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 196) Lists.newArrayList() ==> com.google.common.collect.Lists.newArrayList()
  Line 201) this.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 201) this.getClass() ==> java.lang.Object.getClass()
  Line 596) SymbolReference.solved(new JavaParserEnumDeclaration.ValuesMethod((JavaParserEnumDeclaration) typeDeclaration, typeSolver)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 254) Arrays.stream(ctClass.getDeclaredClasses()).map(itype -> JavassistFactory.toTypeDeclaration(itype, typeSolver)).collect(Collectors.toSet()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 99) wildcardType.getUpperBounds() ==> java.lang.reflect.WildcardType.getUpperBounds()
  Line 146) solve(objectCreationExpr, true) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.solve(com.github.javaparser.ast.expr.ObjectCreationExpr, boolean)
  Line 106) JavaParserFacade.get(typeSolver).getTypeDeclaration(this.wrappedNode) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)
