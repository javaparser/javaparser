  Line 66) constructor.getNumberOfParams() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams()
  Line 67) constructor.getNumberOfParams() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getNumberOfParams()
  Line 67) argumentsTypes.size() ==> java.util.List.size()
  Line 69) constructor.getLastParam().getType() ==> com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType()
  Line 69) constructor.getLastParam() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getLastParam()
  Line 68) nameToDeclaration.equals(that.nameToDeclaration) ==> java.util.Map.equals(java.lang.Object)
  Line 131) res.replaceParamType(i, newParamType) ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceParamType(int, com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 74) nameToValue.hashCode() ==> java.util.Map.hashCode()
  Line 88) new Builder().build() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.Builder.build()
  Line 134) oldReturnType.replaceTypeVariables(typeParameter, type, inferredTypes) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 46) addPathToJar(pathToJar) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.addPathToJar(java.lang.String)
  Line 54) getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 93) this.nameToValue.putAll(nameToValue) ==> java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
  Line 95) this.nameToDeclaration.putAll(nameToDeclaration) ==> java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
  Line 99) typeParameter.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getQualifiedName()
  Line 135) res.replaceReturnType(newReturnType) ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceReturnType(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 146) this.getDeclaration().getQualifiedSignature() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getQualifiedSignature()
  Line 146) this.getDeclaration() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getDeclaration()
  Line 55) sb.append("(") ==> java.lang.StringBuffer.append(java.lang.String)
  Line 70) argumentsTypes.get(pos) ==> java.util.List.get(int)
  Line 36) clazz.getGenericSuperclass() ==> java.lang.Class.getGenericSuperclass()
  Line 100) nameToValue.containsKey(qualifiedName) ==> java.util.Map.containsKey(java.lang.Object)
  Line 13) o2.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 53) instance.addPathToJar(pathToJar) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.addPathToJar(java.lang.String)
  Line 51) s.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 18) node.getClass() ==> java.lang.Object.getClass()
  Line 42) typeDeclaration.getTypeParameters().stream().map(tp -> new TypeVariable(tp)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
