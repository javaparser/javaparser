  Line 42) method.isSynthetic() ==> java.lang.reflect.Method.isSynthetic()
  Line 42) method.isBridge() ==> java.lang.reflect.Method.isBridge()
  Line 53) getQualifiedName().equals(that.getQualifiedName()) ==> java.lang.String.equals(java.lang.Object)
  Line 53) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getQualifiedName()
  Line 50) method.getName() ==> java.lang.reflect.Method.getName()
  Line 77) method.getDeclaringClass().isInterface() ==> java.lang.Class.isInterface()
  Line 77) method.getDeclaringClass() ==> java.lang.reflect.Method.getDeclaringClass()
  Line 78) method.getDeclaringClass() ==> java.lang.reflect.Method.getDeclaringClass()
  Line 171) classNode.getNameAsString() ==> com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.getNameAsString()
  Line 80) method.getDeclaringClass().isEnum() ==> java.lang.Class.isEnum()
  Line 80) method.getDeclaringClass() ==> java.lang.reflect.Method.getDeclaringClass()
  Line 81) method.getDeclaringClass() ==> java.lang.reflect.Method.getDeclaringClass()
  Line 267) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 271) wrappedNode.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 53) that.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getQualifiedName()
  Line 56) declaredOnType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnType()
  Line 56) that.declaredOnType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnType()
  Line 59) declaredOnMethod() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnMethod()
  Line 59) that.declaredOnMethod() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnMethod()
  Line 69) wrapped.getName() ==> javassist.bytecode.SignatureAttribute.TypeParameter.getName()
  Line 75) wrapped.getName() ==> javassist.bytecode.SignatureAttribute.TypeParameter.getName()
  Line 81) ((ReferenceTypeDeclaration) this.container).getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 83) ((MethodLikeDeclaration) this.container).getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.getQualifiedName()
  Line 90) getContainerQualifiedName() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeParameter.getContainerQualifiedName()
  Line 101) wrapped.getClassBound() ==> javassist.bytecode.SignatureAttribute.TypeParameter.getClassBound()
  Line 83) method.getDeclaringClass() ==> java.lang.reflect.Method.getDeclaringClass()
  Line 101) wrapped.getClassBound().toString().equals(Object.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 101) wrapped.getClassBound().toString() ==> java.lang.Object.toString()
  Line 101) wrapped.getClassBound() ==> javassist.bytecode.SignatureAttribute.TypeParameter.getClassBound()
  Line 101) Object.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 272) name.startsWith(prefix) ==> java.lang.String.startsWith(java.lang.String)
  Line 172) sr.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 272) name.length() ==> java.lang.String.length()
  Line 102) wrapped.getClassBound().toString() ==> java.lang.Object.toString()
  Line 173) sr.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 102) wrapped.getClassBound() ==> javassist.bytecode.SignatureAttribute.TypeParameter.getClassBound()
  Line 177) SymbolReference.unsolved(ConstructorDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
  Line 104) wrapped.getInterfaceBound() ==> javassist.bytecode.SignatureAttribute.TypeParameter.getInterfaceBound()
  Line 272) prefix.length() ==> java.lang.String.length()
  Line 179) ConstructorResolutionLogic.findMostApplicable(((ClassDeclaration) typeDecl).getConstructors(), argumentTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 179) ((ClassDeclaration) typeDecl).getConstructors() ==> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getConstructors()
  Line 105) ot.toString() ==> java.lang.Object.toString()
  Line 89) ReflectionFactory.typeUsageFor(method.getGenericReturnType(), typeSolver) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 89) method.getGenericReturnType() ==> java.lang.reflect.Method.getGenericReturnType()
  Line 94) method.getParameterTypes() ==> java.lang.reflect.Method.getParameterTypes()
  Line 100) method.isVarArgs() ==> java.lang.reflect.Method.isVarArgs()
  Line 113) Optional.of((ReferenceTypeDeclaration) container) ==> java.util.Optional.of(T)
  Line 115) Optional.empty() ==> java.util.Optional.empty()
  Line 100) JavaParserFactory.getContext(type, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 181) placeholder.setMethod(res) ==> com.github.javaparser.symbolsolver.javaparsermodel.LambdaArgumentTypePlaceholder.setMethod(com.github.javaparser.symbolsolver.model.resolution.SymbolReference<? extends com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration>)
  Line 273) new JavaParserClassDeclaration(this.wrappedNode, typeSolver).solveType(name.substring(prefix.length()), typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserClassDeclaration.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 101) method.getParameterCount() ==> java.lang.reflect.Method.getParameterCount()
