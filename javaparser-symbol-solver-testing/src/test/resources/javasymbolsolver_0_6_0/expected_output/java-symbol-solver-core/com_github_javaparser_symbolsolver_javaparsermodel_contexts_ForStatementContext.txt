  Line 45) wrappedNode.getInitialization() ==> com.github.javaparser.ast.stmt.ForStmt.getInitialization()
  Line 48) variableDeclarationExpr.getVariables() ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.getVariables()
  Line 49) variableDeclarator.getName().getId().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 49) variableDeclarator.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 342) map.get(keyLambdaExpr) ==> java.util.Map.get(java.lang.Object)
  Line 49) variableDeclarator.getName() ==> com.github.javaparser.ast.body.VariableDeclarator.getName()
  Line 346) Optional.empty() ==> java.util.Optional.empty()
  Line 160) this.getQualifiedName() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserInterfaceDeclaration.getQualifiedName()
  Line 160) other.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 163) this.wrappedNode.getExtendedTypes() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes()
  Line 50) SymbolReference.solved(JavaParserSymbolDeclaration.localVar(variableDeclarator, typeSolver)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 50) JavaParserSymbolDeclaration.localVar(variableDeclarator, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserSymbolDeclaration.localVar(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 164) wrappedNode.getExtendedTypes() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes()
  Line 54) expression.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 54) expression.getClass() ==> java.lang.Object.getClass()
  Line 350) methodReferenceExpr.getScope() ==> com.github.javaparser.ast.expr.MethodReferenceExpr.getScope()
  Line 353) methodReferenceExpr.getScope() ==> com.github.javaparser.ast.expr.MethodReferenceExpr.getScope()
  Line 165) new SymbolSolver(typeSolver).solveType(type) ==> com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveType(com.github.javaparser.ast.type.Type)
  Line 354) typeExpr.getType() ==> com.github.javaparser.ast.expr.TypeExpr.getType()
  Line 355) typeExpr.getType().getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 355) typeExpr.getType().getClass() ==> java.lang.Object.getClass()
  Line 355) typeExpr.getType() ==> com.github.javaparser.ast.expr.TypeExpr.getType()
  Line 357) typeExpr.getType() ==> com.github.javaparser.ast.expr.TypeExpr.getType()
  Line 166) ancestor.canBeAssignedTo(other) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.canBeAssignedTo(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
  Line 58) getParentNode(wrappedNode) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 172) this.wrappedNode.getImplementedTypes() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplementedTypes()
  Line 173) wrappedNode.getImplementedTypes() ==> com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplementedTypes()
  Line 59) StatementContext.solveInBlock(name, typeSolver, wrappedNode) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.StatementContext.solveInBlock(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.ast.stmt.Statement)
  Line 61) getParent().solveSymbol(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 61) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 67) getParent().solveMethod(name, argumentsTypes, false, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 67) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
