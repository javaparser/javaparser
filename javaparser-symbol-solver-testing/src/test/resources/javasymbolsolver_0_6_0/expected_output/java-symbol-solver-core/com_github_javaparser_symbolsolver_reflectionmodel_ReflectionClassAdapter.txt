  Line 45) res.add(new ArrayType(componentType)) ==> java.util.List.add(E)
  Line 51) variadicValues.isEmpty() ==> java.util.List.isEmpty()
  Line 55) variadicValues.get(0) ==> java.util.List.get(int)
  Line 25) getType().isArray() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
  Line 25) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 30) getType().arrayLevel() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.arrayLevel()
  Line 30) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 35) getType().isPrimitive() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isPrimitive()
  Line 35) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 40) getType().isNull() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isNull()
  Line 40) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 45) getType().isReference() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReference()
  Line 45) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 50) getType().isReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
  Line 50) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 55) getType().isVoid() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isVoid()
  Line 81) replaceTypeParams(tp, typeSolver, context) ==> com.github.javaparser.symbolsolver.declarations.common.MethodDeclarationCommonLogic.replaceTypeParams(com.github.javaparser.symbolsolver.model.typesystem.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context)
  Line 55) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 60) getType().isTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable()
  Line 48) superClass.getAllClassesAncestors() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllClassesAncestors()
  Line 54) typeParameter.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getQualifiedName()
  Line 51) superclasses.removeIf(s -> s.getQualifiedName().equals(Object.class.getCanonicalName())) ==> java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
  Line 64) SymbolReference.unsolved(ReferenceTypeDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
  Line 69) tryToSolveType(name) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver.tryToSolveType(java.lang.String)
  Line 70) res.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 60) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 31) declaringType() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.declaringType()
  Line 55) nameToValue.put(qualifiedName, value) ==> java.util.Map.put(K, V)
  Line 65) getType().isArray() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
  Line 65) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 38) declaringType().getClassName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getClassName()
  Line 38) declaringType() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.declaringType()
  Line 70) getType().asArrayType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType()
  Line 70) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 46) declaringType().getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 75) getType().asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 75) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 46) declaringType() ==> com.github.javaparser.symbolsolver.model.declarations.MethodLikeDeclaration.declaringType()
  Line 80) getType().asTypeParameter() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter()
  Line 80) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 85) getType().asTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeVariable()
  Line 85) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 90) getType().asPrimitive() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asPrimitive()
  Line 90) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 95) getType().asWildcard() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard()
  Line 95) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 100) getType().describe() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.describe()
  Line 100) getType() ==> com.github.javaparser.symbolsolver.model.typesystem.LazyType.getType()
  Line 128) paramTypes.size() ==> java.util.List.size()
  Line 129) paramTypes.get(i) ==> java.util.List.get(int)
  Line 71) res.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 46) this.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 56) nameToDeclaration.put(qualifiedName, typeParameter) ==> java.util.Map.put(K, V)
  Line 105) getType().replaceTypeVariables(tp, replaced, inferredTypes) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 60) isApplicable(constructor, argumentsTypes, typeSolver, false) ==> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, boolean)
  Line 130) originalParamType.replaceTypeVariables(typeParameter, type, inferredTypes) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 13) o1.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 51) s.getQualifiedName().equals(Object.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 41) symbols.add(JavaParserSymbolDeclaration.field(v, typeSolver)) ==> java.util.List.add(E)
  Line 88) methodDeclaration.getTypeParameters().stream().filter(tp -> tp.getName().equals(name)).map(tp -> toType(tp)).findFirst() ==> java.util.stream.Stream.findFirst()
