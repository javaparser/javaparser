  Line 598) ((JavaParserEnumDeclaration) typeDeclaration).getContext() ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserEnumDeclaration.getContext()
  Line 103) type.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 103) type.getClass() ==> java.lang.Object.getClass()
  Line 254) Arrays.stream(ctClass.getDeclaredClasses()).map(itype -> JavassistFactory.toTypeDeclaration(itype, typeSolver)) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 108) Modifier.isPublic(modifiers) ==> java.lang.reflect.Modifier.isPublic(int)
  Line 110) Modifier.isProtected(modifiers) ==> java.lang.reflect.Modifier.isProtected(int)
  Line 112) Modifier.isPrivate(modifiers) ==> java.lang.reflect.Modifier.isPrivate(int)
  Line 254) Arrays.stream(ctClass.getDeclaredClasses()) ==> java.util.Arrays.stream(T[])
  Line 599) ctx.solveMethod(name, argumentsTypes, staticOnly, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 254) ctClass.getDeclaredClasses() ==> javassist.CtClass.getDeclaredClasses()
  Line 602) ((ReflectionClassDeclaration) typeDeclaration).solveMethod(name, argumentsTypes, staticOnly) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean)
  Line 254) JavassistFactory.toTypeDeclaration(itype, typeSolver) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistFactory.toTypeDeclaration(javassist.CtClass, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
