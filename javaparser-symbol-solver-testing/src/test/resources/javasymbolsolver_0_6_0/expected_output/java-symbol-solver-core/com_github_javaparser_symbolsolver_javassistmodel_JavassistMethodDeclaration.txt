  Line 619) typeDeclaration.getClass() ==> java.lang.Object.getClass()
  Line 625) source.equals(target) ==> java.lang.Object.equals(java.lang.Object)
  Line 71) isAssignableBy(new ReferenceTypeImpl(other, typeSolver)) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 76) clazz.getPackage() ==> java.lang.Class.getPackage()
  Line 628) source.isReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
  Line 628) target.isReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
  Line 629) source.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 630) target.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 51) ctMethod.getDeclaringClass().isInterface() ==> javassist.CtClass.isInterface()
  Line 51) ctMethod.getDeclaringClass() ==> javassist.CtMember.getDeclaringClass()
  Line 51) isAbstract() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistMethodDeclaration.isAbstract()
  Line 77) clazz.getPackage().getName() ==> java.lang.Package.getName()
  Line 77) clazz.getPackage() ==> java.lang.Class.getPackage()
  Line 84) clazz.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 85) getPackageName() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName()
  Line 56) Modifier.isStatic(ctMethod.getModifiers()) ==> java.lang.reflect.Modifier.isStatic(int)
  Line 56) ctMethod.getModifiers() ==> javassist.CtBehavior.getModifiers()
  Line 68) ctMethod.getName() ==> javassist.CtMethod.getName()
  Line 88) ctMethod.getDeclaringClass().isInterface() ==> javassist.CtClass.isInterface()
  Line 138) JavaParserFactory.getContext(wrappedNode, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 88) ctMethod.getDeclaringClass() ==> javassist.CtMember.getDeclaringClass()
  Line 157) explicitConstructorInvocationStmt.getArguments() ==> com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getArguments()
  Line 159) explicitConstructorInvocationStmt.getAncestorOfType(ClassOrInterfaceDeclaration.class) ==> com.github.javaparser.HasParentNode.getAncestorOfType(java.lang.Class<N>)
  Line 631) sourceRefType.getQualifiedName().equals(targetRefType.getQualifiedName()) ==> java.lang.String.equals(java.lang.Object)
  Line 89) ctMethod.getDeclaringClass() ==> javassist.CtMember.getDeclaringClass()
  Line 631) sourceRefType.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 91) ctMethod.getDeclaringClass() ==> javassist.CtMember.getDeclaringClass()
  Line 147) wrappedNode.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 86) canonicalName.substring(getPackageName().length() + 1, canonicalName.length()) ==> java.lang.String.substring(int, int)
  Line 86) getPackageName().length() ==> java.lang.String.length()
  Line 86) getPackageName() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionInterfaceDeclaration.getPackageName()
  Line 86) canonicalName.length() ==> java.lang.String.length()
  Line 98) JavassistFactory.typeUsageFor(ctMethod.getReturnType(), typeSolver) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistFactory.typeUsageFor(javassist.CtClass, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 98) ctMethod.getReturnType() ==> javassist.CtMethod.getReturnType()
  Line 108) ctMethod.getParameterTypes() ==> javassist.CtBehavior.getParameterTypes()
  Line 147) wrappedNode.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 106) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 118) ctMethod.getModifiers() ==> javassist.CtBehavior.getModifiers()
  Line 119) ctMethod.getParameterTypes() ==> javassist.CtBehavior.getParameterTypes()
  Line 631) targetRefType.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 93) clazz.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 160) optAncestor.isPresent() ==> java.util.Optional.isPresent()
  Line 152) wrappedNode.getExtendedTypes().isEmpty() ==> com.github.javaparser.ast.NodeList.isEmpty()
