  Line 39) typeParameter.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getQualifiedName()
  Line 43) this.typeParameter.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getQualifiedName()
  Line 49) getClass() ==> java.lang.Object.getClass()
  Line 49) o.getClass() ==> java.lang.Object.getClass()
  Line 64) rawType.transformTypeParameters(tp -> typeUsageFor(actualTypes.remove(0), typeSolver)) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.transformTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer)
  Line 176) Arrays.stream(ctClass.getDeclaredMethods()).map(m -> new JavassistMethodDeclaration(m, typeSolver)) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 176) Arrays.stream(ctClass.getDeclaredMethods()) ==> java.util.Arrays.stream(T[])
  Line 137) expr.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 176) ctClass.getDeclaredMethods() ==> javassist.CtClass.getDeclaredMethods()
  Line 137) expr.getClass() ==> java.lang.Object.getClass()
  Line 26) JavaParserFactory.getSymbolDeclarator(wrappedNode.getParameter(), typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getSymbolDeclarator(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 26) wrappedNode.getParameter() ==> com.github.javaparser.ast.stmt.CatchClause.getParameter()
  Line 178) Collectors.toSet() ==> java.util.stream.Collectors.toSet()
  Line 53) typeParameter.getName().equals(that.typeParameter.getName()) ==> java.lang.String.equals(java.lang.Object)
  Line 53) typeParameter.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 53) that.typeParameter.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 54) typeParameter.declaredOnType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnType()
  Line 184) ctClass.getAnnotations() ==> javassist.CtClass.getAnnotations()
  Line 54) that.typeParameter.declaredOnType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnType()
  Line 55) typeParameter.declaredOnMethod() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnMethod()
  Line 55) that.typeParameter.declaredOnMethod() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnMethod()
  Line 62) typeParameter.hashCode() ==> java.lang.Object.hashCode()
  Line 525) methods.stream().filter((m) -> isApplicable(m, name, argumentsTypes, typeSolver)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 27) AbstractJavaParserContext.solveWith(sb, name) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.solveWith(com.github.javaparser.symbolsolver.resolution.SymbolDeclarator, java.lang.String)
  Line 525) methods.stream() ==> java.util.Collection.stream()
  Line 28) symbolReference.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 33) getParent().solveSymbol(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 33) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 185) annotationRaw.getClass().getCanonicalName().equals(canonicalName) ==> java.lang.String.equals(java.lang.Object)
  Line 185) annotationRaw.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 185) annotationRaw.getClass() ==> java.lang.Object.getClass()
  Line 77) tpToBeReplaced.getName().equals(this.typeParameter.getName()) ==> java.lang.String.equals(java.lang.Object)
  Line 77) tpToBeReplaced.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 64) typeUsageFor(actualTypes.remove(0), typeSolver) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 64) actualTypes.remove(0) ==> java.util.List.remove(int)
  Line 68) c.isPrimitive() ==> java.lang.Class.isPrimitive()
  Line 69) c.getName().equals(Void.TYPE.getName()) ==> java.lang.String.equals(java.lang.Object)
  Line 69) c.getName() ==> java.lang.Class.getName()
  Line 188) Arrays.stream(annotationRaw.getClass().getInterfaces()).anyMatch(it -> it.getCanonicalName().equals(canonicalName)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 69) Void.TYPE.getName() ==> java.lang.Class.getName()
  Line 188) Arrays.stream(annotationRaw.getClass().getInterfaces()) ==> java.util.Arrays.stream(T[])
  Line 188) annotationRaw.getClass().getInterfaces() ==> java.lang.Class.getInterfaces()
  Line 188) annotationRaw.getClass() ==> java.lang.Object.getClass()
  Line 72) PrimitiveType.byName(c.getName()) ==> com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.byName(java.lang.String)
  Line 72) c.getName() ==> java.lang.Class.getName()
  Line 77) this.typeParameter.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 78) inferredTypes.put(this.asTypeParameter(), replaced) ==> java.util.Map.put(K, V)
  Line 78) this.asTypeParameter() ==> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable.asTypeParameter()
  Line 92) typeParameter.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 112) other.isTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable()
  Line 113) describe().equals(other.describe()) ==> java.lang.String.equals(java.lang.Object)
  Line 113) describe() ==> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable.describe()
  Line 525) isApplicable(m, name, argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.isApplicable(com.github.javaparser.symbolsolver.model.methods.MethodUsage, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 525) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 188) it.getCanonicalName().equals(canonicalName) ==> java.lang.String.equals(java.lang.Object)
  Line 188) it.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 527) applicableMethods.isEmpty() ==> java.util.List.isEmpty()
  Line 113) other.describe() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.describe()
