  Line 93) className.replace('$', '.') ==> java.lang.String.replace(char, char)
  Line 100) classpathElements.containsKey(name) ==> java.util.Map.containsKey(java.lang.Object)
  Line 90) getClass() ==> java.lang.Object.getClass()
  Line 39) useThisTypeParametersOnTheGivenType(type.asWildcard().getBoundedType()) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParameterValueProvider.useThisTypeParametersOnTheGivenType(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 39) type.asWildcard().getBoundedType() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType()
  Line 90) o.getClass() ==> java.lang.Object.getClass()
  Line 39) type.asWildcard() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asWildcard()
  Line 13) o1.getName() ==> java.lang.reflect.Method.getName()
  Line 13) o2.getName() ==> java.lang.reflect.Method.getName()
  Line 93) Optional.of(methodUsage) ==> java.util.Optional.of(T)
  Line 95) Optional.empty() ==> java.util.Optional.empty()
  Line 43) type.isReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
  Line 15) o1.getParameterCount() ==> java.lang.reflect.Method.getParameterCount()
  Line 44) type.asReferenceType().transformTypeParameters(tp -> useThisTypeParametersOnTheGivenType(tp)) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.transformTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer)
  Line 15) o2.getParameterCount() ==> java.lang.reflect.Method.getParameterCount()
  Line 104) expectedType.asTypeParameter().getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
