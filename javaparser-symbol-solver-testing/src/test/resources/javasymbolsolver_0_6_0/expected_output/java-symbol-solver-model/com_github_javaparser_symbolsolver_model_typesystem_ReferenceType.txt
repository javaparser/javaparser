  Line 100) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 142) getAllFields().stream().filter(it -> it.declaringType().getQualifiedName().equals(getQualifiedName())) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 142) getAllFields().stream() ==> java.util.Collection.stream()
  Line 142) getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 90) res.isPresent() ==> java.util.Optional.isPresent()
  Line 93) res.get() ==> java.util.Optional.get()
  Line 96) res.get() ==> java.util.Optional.get()
  Line 101) typeDeclaration.isClass() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isClass()
  Line 180) candidates.add(new JavassistMethodDeclaration(method, typeSolver)) ==> java.util.List.add(E)
  Line 142) it.declaringType().getQualifiedName().equals(getQualifiedName()) ==> java.lang.String.equals(java.lang.Object)
  Line 142) it.declaringType().getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 142) it.declaringType() ==> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.declaringType()
  Line 142) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 142) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 185) ctClass.getSuperclass() ==> javassist.CtClass.getSuperclass()
  Line 175) other.isAssignableBy(this) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
  Line 197) hasDirectlyAnnotation(qualifiedName) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String)
  Line 187) new JavassistClassDeclaration(superClass, typeSolver).solveMethod(name, argumentsTypes, staticOnly) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean)
  Line 102) out.println("\n[ Class " + typeDeclaration.getQualifiedName() + " ]") ==> java.io.PrintStream.println(java.lang.String)
  Line 188) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 102) typeDeclaration.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 103) typeDeclaration.asClass().getAllSuperClasses() ==> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getAllSuperClasses()
  Line 103) typeDeclaration.asClass() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asClass()
  Line 189) candidates.add(ref.getCorrespondingDeclaration()) ==> java.util.List.add(E)
  Line 189) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 104) out.println("  superclass: " + sc.getQualifiedName()) ==> java.io.PrintStream.println(java.lang.String)
  Line 197) ctClass.getInterfaces() ==> javassist.CtClass.getInterfaces()
  Line 101) cd.getMembers() ==> com.github.javaparser.ast.body.TypeDeclaration.getMembers()
  Line 104) sc.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 200) getAllAncestors().stream().anyMatch(it -> it.asReferenceType().getTypeDeclaration().hasDirectlyAnnotation(qualifiedName)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 200) getAllAncestors().stream() ==> java.util.Collection.stream()
  Line 200) getAllAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors()
  Line 93) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 78) ((com.github.javaparser.ast.body.EnumDeclaration) container).getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 78) ((com.github.javaparser.ast.body.EnumDeclaration) container).getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 79) b.isEmpty() ==> java.lang.String.isEmpty()
  Line 106) typeDeclaration.asClass().getAllInterfaces() ==> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getAllInterfaces()
  Line 106) typeDeclaration.asClass() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.asClass()
  Line 93) node.getClass() ==> java.lang.Object.getClass()
  Line 98) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 95) ancestor.getFieldType(name).get() ==> java.util.Optional.get()
  Line 95) ancestor.getFieldType(name) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getFieldType(java.lang.String)
  Line 102) clazz.getDeclaredFields() ==> java.lang.Class.getDeclaredFields()
  Line 107) out.println("  interface: " + sc.getQualifiedName()) ==> java.io.PrintStream.println(java.lang.String)
  Line 107) sc.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 103) field.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 103) field.getName() ==> java.lang.reflect.Field.getName()
  Line 107) getSuperClass() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionClassAdapter.getSuperClass()
  Line 114) solveTypeDecl((ClassOrInterfaceDeclaration) node) ==> com.github.javaparser.symbolsolver.SourceFileInfoExtractor.solveTypeDecl(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)
  Line 104) md.getName().getId().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 104) md.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 98) node.getClass() ==> java.lang.Object.getClass()
  Line 104) md.getName() ==> com.github.javaparser.ast.body.CallableDeclaration.getName()
  Line 135) astTypeDeclaration.isPresent() ==> java.util.Optional.isPresent()
  Line 111) superclass.getTypeDeclaration().hasField(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String)
  Line 85) getClassName(base, getParentNode(container)) ==> com.github.javaparser.symbolsolver.javaparsermodel.declarations.Helper.getClassName(java.lang.String, com.github.javaparser.ast.Node)
  Line 200) it.asReferenceType().getTypeDeclaration().hasDirectlyAnnotation(qualifiedName) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String)
  Line 200) it.asReferenceType().getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 198) new JavassistInterfaceDeclaration(interfaze, typeSolver).solveMethod(name, argumentsTypes, staticOnly) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean)
  Line 71) Arrays.stream(m.getParameters()).map(p -> toSignature(p)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 71) Arrays.stream(m.getParameters()).map(p -> toSignature(p)) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 71) Arrays.stream(m.getParameters()) ==> java.util.Arrays.stream(T[])
  Line 199) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 116) getParentNode(node) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 71) m.getParameters() ==> java.lang.reflect.Executable.getParameters()
  Line 71) toSignature(p) ==> com.github.javaparser.symbolsolver.logic.FunctionalInterfaceLogic.toSignature(java.lang.reflect.Parameter)
  Line 71) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 75) p.getType().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 75) p.getType() ==> java.lang.reflect.Parameter.getType()
  Line 200) candidates.add(ref.getCorrespondingDeclaration()) ==> java.util.List.add(E)
  Line 200) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 103) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 132) symbolDeclarator.getSymbolDeclarations().stream().filter(d -> d.getName().equals(name)).map(d -> Value.from(d)) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 132) symbolDeclarator.getSymbolDeclarations().stream().filter(d -> d.getName().equals(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 132) symbolDeclarator.getSymbolDeclarations().stream() ==> java.util.Collection.stream()
  Line 132) symbolDeclarator.getSymbolDeclarations() ==> com.github.javaparser.symbolsolver.resolution.SymbolDeclarator.getSymbolDeclarations()
  Line 133) d.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 103) node.getClass() ==> java.lang.Object.getClass()
  Line 116) getParentNode(node) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 133) d.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 200) it.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.asReferenceType()
  Line 111) superclass.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 215) this.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 119) cd.getMembers() ==> com.github.javaparser.ast.body.TypeDeclaration.getMembers()
  Line 117) clazz.getDeclaredFields() ==> java.lang.Class.getDeclaredFields()
  Line 216) tp.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 216) tp.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 217) Optional.of(tp) ==> java.util.Optional.of(T)
  Line 220) this.containerType().isPresent() ==> java.util.Optional.isPresent()
  Line 220) this.containerType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType()
  Line 134) Value.from(d) ==> com.github.javaparser.symbolsolver.model.resolution.Value.from(com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration)
  Line 85) getParentNode(container) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 221) this.containerType().get().findTypeParameter(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String)
  Line 108) node.getClass().getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 122) fd.getVariables() ==> com.github.javaparser.ast.body.FieldDeclaration.getVariables()
  Line 117) getParentNode(node) ==> com.github.javaparser.symbolsolver.javaparser.Navigator.getParentNode(com.github.javaparser.ast.Node)
  Line 118) fields.add(new ReflectionFieldDeclaration(field, typeSolver)) ==> java.util.ArrayList.add(E)
  Line 207) MethodResolutionLogic.findMostApplicable(candidates, name, argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 78) Arrays.stream(Object.class.getDeclaredMethods()).map(method -> getSignature(method)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 136) SymbolReference.solved(JavaParserFacade.get(this).getTypeDeclaration(astTypeDeclaration.get())) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
