  Line 17) o1.getParameterCount() ==> java.lang.reflect.Method.getParameterCount()
  Line 18) new ParameterComparator().compare(o1.getParameters()[i], o2.getParameters()[i]) ==> com.github.javaparser.symbolsolver.reflectionmodel.comparators.ParameterComparator.compare(java.lang.reflect.Parameter, java.lang.reflect.Parameter)
  Line 18) o1.getParameters() ==> java.lang.reflect.Executable.getParameters()
  Line 18) o2.getParameters() ==> java.lang.reflect.Executable.getParameters()
  Line 46) isVariadic() ==> com.github.javaparser.symbolsolver.model.declarations.ParameterDeclaration.isVariadic()
  Line 21) new ClassComparator().compare(o1.getReturnType(), o2.getReturnType()) ==> com.github.javaparser.symbolsolver.reflectionmodel.comparators.ClassComparator.compare(java.lang.Class<?>, java.lang.Class<?>)
  Line 21) o1.getReturnType() ==> java.lang.reflect.Method.getReturnType()
  Line 47) getType().asArrayType().getComponentType().describe() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.describe()
  Line 47) getType().asArrayType().getComponentType() ==> com.github.javaparser.symbolsolver.model.typesystem.ArrayType.getComponentType()
  Line 47) getType().asArrayType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asArrayType()
  Line 43) getClass() ==> java.lang.Object.getClass()
  Line 47) getType() ==> com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType()
  Line 49) getType().describe() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.describe()
  Line 49) getType() ==> com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType()
  Line 21) o2.getReturnType() ==> java.lang.reflect.Method.getReturnType()
  Line 104) expectedType.asTypeParameter() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter()
  Line 43) o.getClass() ==> java.lang.Object.getClass()
