  Line 53) deriveParams(typeDeclaration) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.deriveParams(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
  Line 60) typeDeclaration.isTypeParameter() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isTypeParameter()
  Line 63) typeParameters.size() ==> java.util.List.size()
  Line 63) typeParameters.size() ==> java.util.List.size()
  Line 63) typeDeclaration.getTypeParameters().size() ==> java.util.List.size()
  Line 63) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 64) String.format("expected either zero type parameters or has many as defined in the declaration (%d). Found %d", typeDeclaration.getTypeParameters().size(), typeParameters.size()) ==> java.lang.String.format(java.lang.String, java.lang.Object...)
  Line 65) typeDeclaration.getTypeParameters().size() ==> java.util.List.size()
  Line 65) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 65) typeParameters.size() ==> java.util.List.size()
  Line 68) typeParameters.size() ==> java.util.List.size()
  Line 69) typeParametersMapBuilder.setValue(typeDeclaration.getTypeParameters().get(i), typeParameters.get(i)) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.Builder.setValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 69) typeDeclaration.getTypeParameters().get(i) ==> java.util.List.get(int)
  Line 69) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 69) typeParameters.get(i) ==> java.util.List.get(int)
  Line 71) typeParametersMapBuilder.build() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.Builder.build()
  Line 83) getClass() ==> java.lang.Object.getClass()
  Line 83) o.getClass() ==> java.lang.Object.getClass()
  Line 87) typeDeclaration.equals(that.typeDeclaration) ==> java.lang.Object.equals(java.lang.Object)
  Line 88) typeParametersMap.equals(that.typeParametersMap) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.equals(java.lang.Object)
  Line 95) typeDeclaration.hashCode() ==> java.lang.Object.hashCode()
  Line 96) typeParametersMap.hashCode() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.hashCode()
  Line 102) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 132) hasName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.hasName()
  Line 133) sb.append(typeDeclaration.getQualifiedName()) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 133) typeDeclaration.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 135) sb.append("<anonymous class>") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 137) typeParametersMap().isEmpty() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.isEmpty()
  Line 137) typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 138) sb.append("<") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 139) sb.append(String.join(", ", typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap().getValue(tp).describe()).collect(Collectors.toList()))) ==> java.lang.StringBuilder.append(java.lang.String)
  Line 139) String.join(", ", typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap().getValue(tp).describe()).collect(Collectors.toList())) ==> java.lang.String.join(java.lang.CharSequence, java.lang.Iterable<? extends java.lang.CharSequence>)
  Line 139) typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap().getValue(tp).describe()).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 139) typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap().getValue(tp).describe()) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 139) typeDeclaration.getTypeParameters().stream() ==> java.util.Collection.stream()
  Line 139) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 140) typeParametersMap().getValue(tp).describe() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.describe()
  Line 140) typeParametersMap().getValue(tp) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
  Line 140) typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 141) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 142) sb.append(">") ==> java.lang.StringBuilder.append(java.lang.String)
  Line 144) sb.toString() ==> java.lang.StringBuilder.toString()
  Line 157) this.typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 158) transformer.transform(tp) ==> com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer.transform(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 161) result.asReferenceType().typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 161) result.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 162) typeParametersCorrected.set(i, transformedTp) ==> java.util.List.set(int, E)
  Line 163) create(typeDeclaration, typeParametersCorrected, typeSolver) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.create(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 178) this.typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 179) tp.replaceTypeVariables(tpToReplace, replaced, inferredTypes) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type, java.util.Map<com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 181) tp.isTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable()
  Line 181) tp.asTypeVariable().describe().equals(tpToReplace.getName()) ==> java.lang.String.equals(java.lang.Object)
  Line 181) tp.asTypeVariable().describe() ==> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable.describe()
  Line 181) tp.asTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeVariable()
  Line 181) tpToReplace.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 182) inferredTypes.put(tp.asTypeParameter(), replaced) ==> java.util.Map.put(K, V)
  Line 182) tp.asTypeParameter() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeParameter()
  Line 185) result.asReferenceType().typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 185) result.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.asReferenceType()
  Line 186) typeParametersCorrected.set(i, transformedTp) ==> java.util.List.set(int, E)
  Line 187) create(typeDeclaration, typeParametersCorrected, typeSolver) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.create(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 192) result.typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 193) values.contains(tpToReplace) ==> java.util.List.contains(java.lang.Object)
  Line 194) values.indexOf(tpToReplace) ==> java.util.List.indexOf(java.lang.Object)
  Line 195) values.set(index, replaced) ==> java.util.List.set(int, E)
  Line 196) create(result.getTypeDeclaration(), values, typeSolver) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.create(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 196) result.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 233) typeDeclaration.getAllAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors()
  Line 235) ancestors.stream().map(a -> typeParametersMap().replaceAll(a).asReferenceType()).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 235) ancestors.stream().map(a -> typeParametersMap().replaceAll(a).asReferenceType()) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 235) ancestors.stream() ==> java.util.Collection.stream()
  Line 236) typeParametersMap().replaceAll(a).asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 236) typeParametersMap().replaceAll(a) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.replaceAll(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 236) typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 237) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 240) ancestors.removeIf(a -> a.getQualifiedName().equals(Object.class.getCanonicalName())) ==> java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
  Line 240) a.getQualifiedName().equals(Object.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 240) a.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 240) Object.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 241) typeSolver.solveType(Object.class.getCanonicalName()) ==> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.solveType(java.lang.String)
  Line 241) Object.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 242) create(objectType, typeSolver) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.create(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 243) ancestors.add(objectRef) ==> java.util.List.add(E)
  Line 248) getAllAncestors().stream().filter(it -> it.getTypeDeclaration().isInterface()).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 248) getAllAncestors().stream().filter(it -> it.getTypeDeclaration().isInterface()) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 248) getAllAncestors().stream() ==> java.util.Collection.stream()
  Line 248) getAllAncestors() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors()
  Line 249) it.getTypeDeclaration().isInterface() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isInterface()
  Line 249) it.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 250) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 254) getAllAncestors().stream().filter(it -> it.getTypeDeclaration().isClass()).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 254) getAllAncestors().stream().filter(it -> it.getTypeDeclaration().isClass()) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 254) getAllAncestors().stream() ==> java.util.Collection.stream()
  Line 254) getAllAncestors() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors()
  Line 255) it.getTypeDeclaration().isClass() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isClass()
  Line 255) it.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 256) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 268) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 269) tp.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 269) tp.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 270) Optional.of(this.typeParametersMap().getValue(tp)) ==> java.util.Optional.of(T)
  Line 270) this.typeParametersMap().getValue(tp) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
  Line 270) this.typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 273) Optional.empty() ==> java.util.Optional.empty()
  Line 281) this.typeParametersMap.isEmpty() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.isEmpty()
  Line 281) Collections.emptyList() ==> java.util.Collections.emptyList()
  Line 281) typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap.getValue(tp)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 281) typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap.getValue(tp)) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 281) typeDeclaration.getTypeParameters().stream() ==> java.util.Collection.stream()
  Line 281) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 281) typeParametersMap.getValue(tp) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
  Line 281) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 290) isRawType() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.isRawType()
  Line 291) typeDeclaration.getTypeParameters().size() ==> java.util.List.size()
  Line 291) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 292) typeParametersMap.add(new Tuple2<>(typeDeclaration.getTypeParameters().get(0), typeParametersValues().get(i))) ==> java.util.List.add(E)
  Line 292) typeDeclaration.getTypeParameters().get(0) ==> java.util.List.get(int)
  Line 292) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 292) typeParametersValues().get(i) ==> java.util.List.get(int)
  Line 292) typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 319) typeDeclaration.hasField(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasField(java.lang.String)
  Line 320) Optional.empty() ==> java.util.Optional.empty()
  Line 322) typeDeclaration.getField(name).getType() ==> com.github.javaparser.symbolsolver.model.declarations.ValueDeclaration.getType()
  Line 322) typeDeclaration.getField(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getField(java.lang.String)
  Line 323) useThisTypeParametersOnTheGivenType(type) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParameterValueProvider.useThisTypeParametersOnTheGivenType(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 324) Optional.of(type) ==> java.util.Optional.of(T)
  Line 331) typeDeclaration.hasName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.hasName()
  Line 338) typeDeclaration.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 345) typeDeclaration.getId() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId()
  Line 354) typeDeclaration.getTypeParameters().isEmpty() ==> java.util.List.isEmpty()
  Line 354) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 355) typeParametersMap().isEmpty() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.isEmpty()
  Line 355) typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 358) typeParametersMap().getNames() ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getNames()
  Line 358) typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 359) typeParametersMap().getValueBySignature(name) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getValueBySignature(java.lang.String)
  Line 359) typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 360) value.isPresent() ==> java.util.Optional.isPresent()
  Line 360) value.get().isTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isTypeVariable()
  Line 360) value.get() ==> java.util.Optional.get()
  Line 360) value.get().asTypeVariable().qualifiedName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 360) value.get().asTypeVariable().qualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable.qualifiedName()
  Line 360) value.get().asTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeVariable()
  Line 360) value.get() ==> java.util.Optional.get()
  Line 372) typeParameterDeclaration.declaredOnMethod() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.declaredOnMethod()
  Line 375) this.getTypeDeclaration().getId() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getId()
  Line 375) this.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 376) typeId.equals(typeParameterDeclaration.getContainerId()) ==> java.lang.String.equals(java.lang.Object)
  Line 376) typeParameterDeclaration.getContainerId() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getContainerId()
  Line 377) Optional.of(this.typeParametersMap().getValue(typeParameterDeclaration)) ==> java.util.Optional.of(T)
  Line 377) this.typeParametersMap().getValue(typeParameterDeclaration) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
  Line 377) this.typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 379) this.getAllAncestors() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors()
  Line 380) ancestor.getId().equals(typeParameterDeclaration.getContainerId()) ==> java.lang.String.equals(java.lang.Object)
  Line 380) ancestor.getId() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getId()
  Line 380) typeParameterDeclaration.getContainerId() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getContainerId()
  Line 381) Optional.of(ancestor.typeParametersMap().getValue(typeParameterDeclaration)) ==> java.util.Optional.of(T)
  Line 381) ancestor.typeParametersMap().getValue(typeParameterDeclaration) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
  Line 381) ancestor.typeParametersMap() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersMap()
  Line 384) Optional.empty() ==> java.util.Optional.empty()
  Line 394) create(typeDeclaration, typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap.getValue(tp)).collect(Collectors.toList()), typeSolver) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.create(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 394) typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap.getValue(tp)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 394) typeDeclaration.getTypeParameters().stream().map(tp -> typeParametersMap.getValue(tp)) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 394) typeDeclaration.getTypeParameters().stream() ==> java.util.Collection.stream()
  Line 394) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 395) typeParametersMap.getValue(tp) ==> com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap.getValue(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration)
  Line 396) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 404) getQualifiedName().equals(Boolean.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 404) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 404) Boolean.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 406) getQualifiedName().equals(Character.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 406) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 406) Character.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 408) getQualifiedName().equals(Byte.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 408) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 408) Byte.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 410) getQualifiedName().equals(Short.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 410) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 410) Short.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 412) getQualifiedName().equals(Integer.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 412) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 412) Integer.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 414) getQualifiedName().equals(Long.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 414) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 414) Long.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 416) getQualifiedName().equals(Float.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 416) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 416) Float.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 418) getQualifiedName().equals(Double.class.getCanonicalName()) ==> java.lang.String.equals(java.lang.Object)
  Line 418) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 418) Double.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 425) other.equals(this) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.equals(java.lang.Object)
  Line 428) this.getQualifiedName().equals(other.getQualifiedName()) ==> java.lang.String.equals(java.lang.Object)
  Line 428) this.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 428) other.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getQualifiedName()
  Line 429) this.isRawType() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.isRawType()
  Line 429) other.isRawType() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.isRawType()
  Line 432) this.typeParametersValues().size() ==> java.util.List.size()
  Line 432) this.typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 432) other.typeParametersValues().size() ==> java.util.List.size()
  Line 432) other.typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 435) typeParametersValues().size() ==> java.util.List.size()
  Line 435) typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 436) typeParametersValues().get(i) ==> java.util.List.get(int)
  Line 436) typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 437) other.typeParametersValues().get(i) ==> java.util.List.get(int)
  Line 437) other.typeParametersValues() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.typeParametersValues()
  Line 438) thisParam.equals(otherParam) ==> java.lang.Object.equals(java.lang.Object)
  Line 441) thisParamAsWildcard.isSuper() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isSuper()
  Line 441) otherParam.isAssignableBy(thisParamAsWildcard.getBoundedType()) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 441) thisParamAsWildcard.getBoundedType() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType()
  Line 443) thisParamAsWildcard.isExtends() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isExtends()
  Line 443) thisParamAsWildcard.getBoundedType().isAssignableBy(otherParam) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isAssignableBy(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 443) thisParamAsWildcard.getBoundedType() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.getBoundedType()
  Line 445) thisParamAsWildcard.isBounded() ==> com.github.javaparser.symbolsolver.model.typesystem.Wildcard.isBounded()
  Line 452) thisParam.asTypeVariable().asTypeParameter().getBounds(this.typeSolver).stream().map(bound -> bound.getType()).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 452) thisParam.asTypeVariable().asTypeParameter().getBounds(this.typeSolver).stream().map(bound -> bound.getType()) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 452) thisParam.asTypeVariable().asTypeParameter().getBounds(this.typeSolver).stream() ==> java.util.Collection.stream()
  Line 452) thisParam.asTypeVariable().asTypeParameter().getBounds(this.typeSolver) ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getBounds(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 452) thisParam.asTypeVariable().asTypeParameter() ==> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable.asTypeParameter()
  Line 452) thisParam.asTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeVariable()
  Line 452) bound.getType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.Bound.getType()
  Line 452) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 453) otherParam.asTypeVariable().asTypeParameter().getBounds(other.typeSolver).stream().map(bound -> bound.getType()).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 453) otherParam.asTypeVariable().asTypeParameter().getBounds(other.typeSolver).stream().map(bound -> bound.getType()) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 453) otherParam.asTypeVariable().asTypeParameter().getBounds(other.typeSolver).stream() ==> java.util.Collection.stream()
  Line 453) otherParam.asTypeVariable().asTypeParameter().getBounds(other.typeSolver) ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getBounds(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 453) otherParam.asTypeVariable().asTypeParameter() ==> com.github.javaparser.symbolsolver.model.typesystem.TypeVariable.asTypeParameter()
  Line 453) otherParam.asTypeVariable() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asTypeVariable()
  Line 453) bound.getType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.Bound.getType()
  Line 453) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 454) thisBounds.size() ==> java.util.List.size()
  Line 454) otherBounds.size() ==> java.util.List.size()
  Line 454) otherBounds.containsAll(thisBounds) ==> java.util.List.containsAll(java.util.Collection<? extends java.lang.Object>)
  Line 472) typeDeclaration.getTypeParameters().stream().map((tp) -> new TypeVariable(tp)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 472) typeDeclaration.getTypeParameters().stream().map((tp) -> new TypeVariable(tp)) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 472) typeDeclaration.getTypeParameters().stream() ==> java.util.Collection.stream()
  Line 472) typeDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 472) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 476) create(typeDeclaration, typeParametersMap, typeSolver) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.create(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.typesystem.parametrization.TypeParametersMap, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
