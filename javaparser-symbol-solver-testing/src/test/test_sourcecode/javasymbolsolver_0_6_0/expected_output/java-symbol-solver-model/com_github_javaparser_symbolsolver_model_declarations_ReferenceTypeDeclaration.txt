  Line 45) Object.class.getCanonicalName().equals(getQualifiedName()) ==> java.lang.String.equals(java.lang.Object)
  Line 45) Object.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 45) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 46) getAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
  Line 47) ancestors.add(ancestor) ==> java.util.List.add(E)
  Line 48) ancestor.getAllAncestors() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getAllAncestors()
  Line 49) ancestors.contains(inheritedAncestor) ==> java.util.List.contains(java.lang.Object)
  Line 50) ancestors.add(inheritedAncestor) ==> java.util.List.add(E)
  Line 74) this.getAllFields().stream().filter(f -> f.getName().equals(name)).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 74) this.getAllFields().stream().filter(f -> f.getName().equals(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 74) this.getAllFields().stream() ==> java.util.Collection.stream()
  Line 74) this.getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 74) f.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 74) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 75) field.isPresent() ==> java.util.Optional.isPresent()
  Line 76) field.get() ==> java.util.Optional.get()
  Line 86) getVisibleFields().stream().filter(f -> f.getName().equals(name)).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 86) getVisibleFields().stream().filter(f -> f.getName().equals(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 86) getVisibleFields().stream() ==> java.util.Collection.stream()
  Line 86) getVisibleFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields()
  Line 86) f.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 86) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 87) field.isPresent() ==> java.util.Optional.isPresent()
  Line 88) field.get() ==> java.util.Optional.get()
  Line 98) this.getAllFields().stream().filter(f -> f.getName().equals(name)).findFirst().isPresent() ==> java.util.Optional.isPresent()
  Line 98) this.getAllFields().stream().filter(f -> f.getName().equals(name)).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 98) this.getAllFields().stream().filter(f -> f.getName().equals(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 98) this.getAllFields().stream() ==> java.util.Collection.stream()
  Line 98) this.getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 98) f.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 98) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 105) getVisibleFields().stream().filter(f -> f.getName().equals(name)).findFirst().isPresent() ==> java.util.Optional.isPresent()
  Line 105) getVisibleFields().stream().filter(f -> f.getName().equals(name)).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 105) getVisibleFields().stream().filter(f -> f.getName().equals(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 105) getVisibleFields().stream() ==> java.util.Collection.stream()
  Line 105) getVisibleFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getVisibleFields()
  Line 105) f.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 105) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 119) getAllFields().stream().filter(f -> f.declaringType().equals(this) || f.accessLevel() != AccessLevel.PRIVATE).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 119) getAllFields().stream().filter(f -> f.declaringType().equals(this) || f.accessLevel() != AccessLevel.PRIVATE) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 119) getAllFields().stream() ==> java.util.Collection.stream()
  Line 119) getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 120) f.declaringType().equals(this) ==> java.lang.Object.equals(java.lang.Object)
  Line 120) f.declaringType() ==> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.declaringType()
  Line 120) f.accessLevel() ==> com.github.javaparser.symbolsolver.model.declarations.HasAccessLevel.accessLevel()
  Line 121) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 128) getAllFields().stream().filter(it -> !it.isStatic()).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 128) getAllFields().stream().filter(it -> !it.isStatic()) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 128) getAllFields().stream() ==> java.util.Collection.stream()
  Line 128) getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 128) it.isStatic() ==> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.isStatic()
  Line 128) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 135) getAllFields().stream().filter(it -> it.isStatic()).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 135) getAllFields().stream().filter(it -> it.isStatic()) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 135) getAllFields().stream() ==> java.util.Collection.stream()
  Line 135) getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 135) it.isStatic() ==> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.isStatic()
  Line 135) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 142) getAllFields().stream().filter(it -> it.declaringType().getQualifiedName().equals(getQualifiedName())).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 142) getAllFields().stream().filter(it -> it.declaringType().getQualifiedName().equals(getQualifiedName())) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 142) getAllFields().stream() ==> java.util.Collection.stream()
  Line 142) getAllFields() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllFields()
  Line 142) it.declaringType().getQualifiedName().equals(getQualifiedName()) ==> java.lang.String.equals(java.lang.Object)
  Line 142) it.declaringType().getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 142) it.declaringType() ==> com.github.javaparser.symbolsolver.model.declarations.FieldDeclaration.declaringType()
  Line 142) getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 142) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 175) other.isAssignableBy(this) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.isAssignableBy(com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration)
  Line 197) hasDirectlyAnnotation(qualifiedName) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String)
  Line 200) getAllAncestors().stream().anyMatch(it -> it.asReferenceType().getTypeDeclaration().hasDirectlyAnnotation(qualifiedName)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 200) getAllAncestors().stream() ==> java.util.Collection.stream()
  Line 200) getAllAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAllAncestors()
  Line 200) it.asReferenceType().getTypeDeclaration().hasDirectlyAnnotation(qualifiedName) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.hasDirectlyAnnotation(java.lang.String)
  Line 200) it.asReferenceType().getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 200) it.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.asReferenceType()
  Line 215) this.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 216) tp.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 216) tp.getName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration.getName()
  Line 217) Optional.of(tp) ==> java.util.Optional.of(T)
  Line 220) this.containerType().isPresent() ==> java.util.Optional.isPresent()
  Line 220) this.containerType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType()
  Line 221) this.containerType().get().findTypeParameter(name) ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.findTypeParameter(java.lang.String)
  Line 221) this.containerType().get() ==> java.util.Optional.get()
  Line 221) this.containerType() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.containerType()
  Line 223) Optional.empty() ==> java.util.Optional.empty()
