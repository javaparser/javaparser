  Line 49) Modifier.isStatic(m.getModifiers()) ==> java.lang.reflect.Modifier.isStatic(int)
  Line 49) m.getModifiers() ==> java.lang.reflect.Method.getModifiers()
  Line 50) clazz.getMethods() ==> java.lang.Class.getMethods()
  Line 51) method.isBridge() ==> java.lang.reflect.Method.isBridge()
  Line 51) method.isSynthetic() ==> java.lang.reflect.Method.isSynthetic()
  Line 51) method.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 51) method.getName() ==> java.lang.reflect.Method.getName()
  Line 51) staticOnlyCheck.test(method) ==> java.util.function.Predicate.test(T)
  Line 53) methods.add(methodDeclaration) ==> java.util.List.add(E)
  Line 56) scopeType.getAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
  Line 57) MethodResolutionLogic.solveMethodInType(ancestor.getTypeDeclaration(), name, parameterTypes, staticOnly, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 57) ancestor.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 58) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 59) methods.add(ref.getCorrespondingDeclaration()) ==> java.util.List.add(E)
  Line 59) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 63) scopeType.getAncestors().isEmpty() ==> java.util.List.isEmpty()
  Line 63) scopeType.getAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
  Line 65) MethodResolutionLogic.solveMethodInType(objectClass.getTypeDeclaration(), name, parameterTypes, staticOnly, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 65) objectClass.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 66) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 67) methods.add(ref.getCorrespondingDeclaration()) ==> java.util.List.add(E)
  Line 67) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 70) MethodResolutionLogic.findMostApplicable(methods, name, parameterTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 76) typeParameterValues.size() ==> java.util.List.size()
  Line 76) scopeType.getTypeParameters().size() ==> java.util.List.size()
  Line 76) scopeType.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 78) scopeType.getTypeParameters().isEmpty() ==> java.util.List.isEmpty()
  Line 78) scopeType.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 81) scopeType.getTypeParameters().size() ==> java.util.List.size()
  Line 81) scopeType.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 82) typeParameterValues.add(new ReferenceTypeImpl(new ReflectionClassDeclaration(Object.class, typeSolver), typeSolver)) ==> java.util.List.add(E)
  Line 87) clazz.getMethods() ==> java.lang.Class.getMethods()
  Line 88) method.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 88) method.getName() ==> java.lang.reflect.Method.getName()
  Line 88) method.isBridge() ==> java.lang.reflect.Method.isBridge()
  Line 88) method.isSynthetic() ==> java.lang.reflect.Method.isSynthetic()
  Line 90) replaceParams(typeParameterValues, scopeType, methodDeclaration) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic.replaceParams(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration)
  Line 91) methods.add(methodUsage) ==> java.util.List.add(E)
  Line 96) scopeType.getAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
  Line 97) MethodResolutionLogic.solveMethodInType(ancestor.getTypeDeclaration(), name, argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 97) ancestor.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 98) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 99) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 100) replaceParams(typeParameterValues, ancestor.getTypeDeclaration(), correspondingDeclaration) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic.replaceParams(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration)
  Line 100) ancestor.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 101) methods.add(methodUsage) ==> java.util.List.add(E)
  Line 105) scopeType.getAncestors().isEmpty() ==> java.util.List.isEmpty()
  Line 105) scopeType.getAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
  Line 107) MethodResolutionLogic.solveMethodInType(objectClass.getTypeDeclaration(), name, argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 107) objectClass.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 108) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 109) replaceParams(typeParameterValues, objectClass.getTypeDeclaration(), ref.getCorrespondingDeclaration()) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionMethodResolutionLogic.replaceParams(java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration, com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration)
  Line 109) objectClass.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 109) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 110) methods.add(usage) ==> java.util.List.add(E)
  Line 115) argumentsTypes.stream().map((pt) -> {
    int i = 0;
    for (TypeParameterDeclaration tp : scopeType.getTypeParameters()) {
        pt = pt.replaceTypeVariables(tp, finalTypeParameterValues.get(i));
        i++;
    }
    return pt;
}).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 115) argumentsTypes.stream().map((pt) -> {
    int i = 0;
    for (TypeParameterDeclaration tp : scopeType.getTypeParameters()) {
        pt = pt.replaceTypeVariables(tp, finalTypeParameterValues.get(i));
        i++;
    }
    return pt;
}) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 115) argumentsTypes.stream() ==> java.util.Collection.stream()
  Line 117) scopeType.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 118) pt.replaceTypeVariables(tp, finalTypeParameterValues.get(i)) ==> com.github.javaparser.symbolsolver.model.typesystem.Type.replaceTypeVariables(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 118) finalTypeParameterValues.get(i) ==> java.util.List.get(int)
  Line 122) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 123) MethodResolutionLogic.findMostApplicableUsage(methods, name, argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicableUsage(java.util.List<com.github.javaparser.symbolsolver.model.methods.MethodUsage>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 131) typeParameterValues.size() ==> java.util.List.size()
  Line 131) typeParametrizable.getTypeParameters().size() ==> java.util.List.size()
  Line 131) typeParametrizable.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 132) typeParametrizable.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 133) methodUsage.replaceTypeParameter(tp, typeParameterValues.get(i)) ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceTypeParameter(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 133) typeParameterValues.get(i) ==> java.util.List.get(int)
  Line 138) methodDeclaration.getTypeParameters() ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.getTypeParameters()
  Line 139) methodUsage.replaceTypeParameter(methodTypeParameter, new TypeVariable(methodTypeParameter)) ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceTypeParameter(com.github.javaparser.symbolsolver.model.declarations.TypeParameterDeclaration, com.github.javaparser.symbolsolver.model.typesystem.Type)
