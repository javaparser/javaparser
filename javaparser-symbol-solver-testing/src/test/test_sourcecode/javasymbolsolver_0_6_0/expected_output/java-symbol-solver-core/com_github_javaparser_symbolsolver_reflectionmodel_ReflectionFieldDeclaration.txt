  Line 40) calcType() ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFieldDeclaration.calcType()
  Line 56) ReflectionFactory.typeUsageFor(field.getGenericType(), typeSolver) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeUsageFor(java.lang.reflect.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 56) field.getGenericType() ==> java.lang.reflect.Field.getGenericType()
  Line 61) field.getName() ==> java.lang.reflect.Field.getName()
  Line 66) Modifier.isStatic(field.getModifiers()) ==> java.lang.reflect.Modifier.isStatic(int)
  Line 66) field.getModifiers() ==> java.lang.reflect.Field.getModifiers()
  Line 76) ReflectionFactory.typeDeclarationFor(field.getDeclaringClass(), typeSolver) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.typeDeclarationFor(java.lang.Class<?>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 76) field.getDeclaringClass() ==> java.lang.reflect.Field.getDeclaringClass()
  Line 95) ReflectionFactory.modifiersToAccessLevel(field.getModifiers()) ==> com.github.javaparser.symbolsolver.reflectionmodel.ReflectionFactory.modifiersToAccessLevel(int)
  Line 95) field.getModifiers() ==> java.lang.reflect.Field.getModifiers()
