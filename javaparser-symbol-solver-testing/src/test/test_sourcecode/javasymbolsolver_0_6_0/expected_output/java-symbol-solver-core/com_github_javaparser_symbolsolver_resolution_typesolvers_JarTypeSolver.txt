  Line 46) addPathToJar(pathToJar) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.addPathToJar(java.lang.String)
  Line 53) instance.addPathToJar(pathToJar) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.addPathToJar(java.lang.String)
  Line 60) classPool.appendClassPath(pathToJar) ==> javassist.ClassPool.appendClassPath(java.lang.String)
  Line 61) classPool.appendSystemPath() ==> javassist.ClassPool.appendSystemPath()
  Line 67) jarFile.entries() ==> java.util.jar.JarFile.entries()
  Line 68) e.hasMoreElements() ==> java.util.Enumeration.hasMoreElements()
  Line 69) e.nextElement() ==> java.util.Enumeration.nextElement()
  Line 70) entry.isDirectory() ==> java.util.zip.ZipEntry.isDirectory()
  Line 70) entry.getName().endsWith(".class") ==> java.lang.String.endsWith(java.lang.String)
  Line 70) entry.getName() ==> java.util.zip.ZipEntry.getName()
  Line 71) entryPathToClassName(entry.getName()) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.entryPathToClassName(java.lang.String)
  Line 71) entry.getName() ==> java.util.zip.ZipEntry.getName()
  Line 72) classpathElements.put(name, new ClasspathElement(jarFile, entry, name)) ==> java.util.Map.put(K, V)
  Line 88) entryPath.endsWith(".class") ==> java.lang.String.endsWith(java.lang.String)
  Line 91) entryPath.substring(0, entryPath.length() - ".class".length()) ==> java.lang.String.substring(int, int)
  Line 91) entryPath.length() ==> java.lang.String.length()
  Line 91) ".class".length() ==> java.lang.String.length()
  Line 92) className.replace('/', '.') ==> java.lang.String.replace(char, char)
  Line 93) className.replace('$', '.') ==> java.lang.String.replace(char, char)
  Line 100) classpathElements.containsKey(name) ==> java.util.Map.containsKey(java.lang.Object)
  Line 101) SymbolReference.solved(JavassistFactory.toTypeDeclaration(classpathElements.get(name).toCtClass(), getRoot())) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 102) JavassistFactory.toTypeDeclaration(classpathElements.get(name).toCtClass(), getRoot()) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistFactory.toTypeDeclaration(javassist.CtClass, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 102) classpathElements.get(name).toCtClass() ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.ClasspathElement.toCtClass()
  Line 102) classpathElements.get(name) ==> java.util.Map.get(java.lang.Object)
  Line 102) getRoot() ==> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.getRoot()
  Line 104) SymbolReference.unsolved(ReferenceTypeDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
  Line 113) tryToSolveType(name) ==> com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver.tryToSolveType(java.lang.String)
  Line 114) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 115) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 133) jarFile.getInputStream(entry) ==> java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry)
  Line 134) classPool.makeClass(is) ==> javassist.ClassPool.makeClass(java.io.InputStream)
