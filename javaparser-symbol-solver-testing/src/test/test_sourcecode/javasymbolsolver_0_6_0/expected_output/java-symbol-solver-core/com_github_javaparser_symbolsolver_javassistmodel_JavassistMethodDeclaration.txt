  Line 51) ctMethod.getDeclaringClass().isInterface() ==> javassist.CtClass.isInterface()
  Line 51) ctMethod.getDeclaringClass() ==> javassist.CtMember.getDeclaringClass()
  Line 51) isAbstract() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistMethodDeclaration.isAbstract()
  Line 56) Modifier.isStatic(ctMethod.getModifiers()) ==> java.lang.reflect.Modifier.isStatic(int)
  Line 56) ctMethod.getModifiers() ==> javassist.CtBehavior.getModifiers()
  Line 68) ctMethod.getName() ==> javassist.CtMethod.getName()
  Line 88) ctMethod.getDeclaringClass().isInterface() ==> javassist.CtClass.isInterface()
  Line 88) ctMethod.getDeclaringClass() ==> javassist.CtMember.getDeclaringClass()
  Line 89) ctMethod.getDeclaringClass() ==> javassist.CtMember.getDeclaringClass()
  Line 91) ctMethod.getDeclaringClass() ==> javassist.CtMember.getDeclaringClass()
  Line 98) JavassistFactory.typeUsageFor(ctMethod.getReturnType(), typeSolver) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistFactory.typeUsageFor(javassist.CtClass, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 98) ctMethod.getReturnType() ==> javassist.CtMethod.getReturnType()
  Line 108) ctMethod.getParameterTypes() ==> javassist.CtBehavior.getParameterTypes()
  Line 118) ctMethod.getModifiers() ==> javassist.CtBehavior.getModifiers()
  Line 119) ctMethod.getParameterTypes() ==> javassist.CtBehavior.getParameterTypes()
  Line 121) ctMethod.getGenericSignature() ==> javassist.CtBehavior.getGenericSignature()
  Line 122) SignatureAttribute.toMethodSignature(ctMethod.getGenericSignature()) ==> javassist.bytecode.SignatureAttribute.toMethodSignature(java.lang.String)
  Line 122) ctMethod.getGenericSignature() ==> javassist.CtBehavior.getGenericSignature()
  Line 123) methodSignature.getParameterTypes() ==> javassist.bytecode.SignatureAttribute.MethodSignature.getParameterTypes()
  Line 124) JavassistUtils.signatureTypeToType(signatureType, typeSolver, this) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistUtils.signatureTypeToType(javassist.bytecode.SignatureAttribute.Type, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable)
  Line 126) ctMethod.getParameterTypes() ==> javassist.CtBehavior.getParameterTypes()
  Line 140) new MethodDeclarationCommonLogic(this, typeSolver).resolveTypeVariables(context, parameterTypes) ==> com.github.javaparser.symbolsolver.declarations.common.MethodDeclarationCommonLogic.resolveTypeVariables(com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 145) Modifier.isAbstract(ctMethod.getModifiers()) ==> java.lang.reflect.Modifier.isAbstract(int)
  Line 145) ctMethod.getModifiers() ==> javassist.CtBehavior.getModifiers()
  Line 151) ctMethod.getGenericSignature() ==> javassist.CtBehavior.getGenericSignature()
  Line 152) Collections.emptyList() ==> java.util.Collections.emptyList()
  Line 154) SignatureAttribute.toMethodSignature(ctMethod.getGenericSignature()) ==> javassist.bytecode.SignatureAttribute.toMethodSignature(java.lang.String)
  Line 154) ctMethod.getGenericSignature() ==> javassist.CtBehavior.getGenericSignature()
  Line 155) Arrays.stream(methodSignature.getTypeParameters()).map((jasTp) -> new JavassistTypeParameter(jasTp, this, typeSolver)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 155) Arrays.stream(methodSignature.getTypeParameters()).map((jasTp) -> new JavassistTypeParameter(jasTp, this, typeSolver)) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 155) Arrays.stream(methodSignature.getTypeParameters()) ==> java.util.Arrays.stream(T[])
  Line 155) methodSignature.getTypeParameters() ==> javassist.bytecode.SignatureAttribute.MethodSignature.getTypeParameters()
  Line 155) Collectors.toList() ==> java.util.stream.Collectors.toList()
