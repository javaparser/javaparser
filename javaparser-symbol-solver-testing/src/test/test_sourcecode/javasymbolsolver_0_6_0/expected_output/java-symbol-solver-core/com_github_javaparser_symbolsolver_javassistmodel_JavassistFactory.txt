  Line 33) ctClazz.isArray() ==> javassist.CtClass.isArray()
  Line 34) typeUsageFor(ctClazz.getComponentType(), typeSolver) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistFactory.typeUsageFor(javassist.CtClass, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 34) ctClazz.getComponentType() ==> javassist.CtClass.getComponentType()
  Line 35) ctClazz.isPrimitive() ==> javassist.CtClass.isPrimitive()
  Line 36) ctClazz.getName().equals("void") ==> java.lang.String.equals(java.lang.Object)
  Line 36) ctClazz.getName() ==> javassist.CtClass.getName()
  Line 39) PrimitiveType.byName(ctClazz.getName()) ==> com.github.javaparser.symbolsolver.model.typesystem.PrimitiveType.byName(java.lang.String)
  Line 39) ctClazz.getName() ==> javassist.CtClass.getName()
  Line 42) ctClazz.isInterface() ==> javassist.CtClass.isInterface()
  Line 45) ctClazz.isEnum() ==> javassist.CtClass.isEnum()
  Line 59) ctClazz.isInterface() ==> javassist.CtClass.isInterface()
  Line 61) ctClazz.isEnum() ==> javassist.CtClass.isEnum()
  Line 63) ctClazz.isAnnotation() ==> javassist.CtClass.isAnnotation()
  Line 65) ctClazz.isArray() ==> javassist.CtClass.isArray()
  Line 73) Modifier.isPublic(modifiers) ==> java.lang.reflect.Modifier.isPublic(int)
  Line 75) Modifier.isProtected(modifiers) ==> java.lang.reflect.Modifier.isProtected(int)
  Line 77) Modifier.isPrivate(modifiers) ==> java.lang.reflect.Modifier.isPrivate(int)
