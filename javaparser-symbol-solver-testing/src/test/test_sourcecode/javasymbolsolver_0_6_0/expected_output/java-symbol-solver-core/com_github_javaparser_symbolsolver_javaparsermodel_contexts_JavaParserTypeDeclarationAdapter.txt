  Line 42) this.wrappedNode.getName().getId().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 42) this.wrappedNode.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 42) this.wrappedNode.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 43) SymbolReference.solved(JavaParserFacade.get(typeSolver).getTypeDeclaration(wrappedNode)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 43) JavaParserFacade.get(typeSolver).getTypeDeclaration(wrappedNode) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.TypeDeclaration<?>)
  Line 43) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 47) this.wrappedNode.getMembers() ==> com.github.javaparser.ast.body.TypeDeclaration.getMembers()
  Line 50) internalType.getName().getId().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 50) internalType.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 50) internalType.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 51) SymbolReference.solved(JavaParserFacade.get(typeSolver).getTypeDeclaration(internalType)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 51) JavaParserFacade.get(typeSolver).getTypeDeclaration(internalType) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.getTypeDeclaration(com.github.javaparser.ast.body.TypeDeclaration<?>)
  Line 51) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 52) name.startsWith(String.format("%s.%s", wrappedNode.getName(), internalType.getName())) ==> java.lang.String.startsWith(java.lang.String)
  Line 52) String.format("%s.%s", wrappedNode.getName(), internalType.getName()) ==> java.lang.String.format(java.lang.String, java.lang.Object...)
  Line 52) wrappedNode.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 52) internalType.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 53) JavaParserFactory.getContext(internalType, typeSolver).solveType(name.substring(wrappedNode.getName().getId().length() + 1), typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 53) JavaParserFactory.getContext(internalType, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 53) name.substring(wrappedNode.getName().getId().length() + 1) ==> java.lang.String.substring(int)
  Line 53) wrappedNode.getName().getId().length() ==> java.lang.String.length()
  Line 53) wrappedNode.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 53) wrappedNode.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 54) name.startsWith(String.format("%s.", internalType.getName())) ==> java.lang.String.startsWith(java.lang.String)
  Line 54) String.format("%s.", internalType.getName()) ==> java.lang.String.format(java.lang.String, java.lang.Object...)
  Line 54) internalType.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 55) JavaParserFactory.getContext(internalType, typeSolver).solveType(name.substring(internalType.getName().getId().length() + 1), typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 55) JavaParserFactory.getContext(internalType, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFactory.getContext(com.github.javaparser.ast.Node, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 55) name.substring(internalType.getName().getId().length() + 1) ==> java.lang.String.substring(int)
  Line 55) internalType.getName().getId().length() ==> java.lang.String.length()
  Line 55) internalType.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 55) internalType.getName() ==> com.github.javaparser.ast.body.TypeDeclaration.getName()
  Line 62) nodeWithTypeParameters.getTypeParameters() ==> com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.getTypeParameters()
  Line 64) astTp.getName().getId().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 64) astTp.getName().getId() ==> com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.getId()
  Line 64) astTp.getName() ==> com.github.javaparser.ast.type.TypeParameter.getName()
  Line 65) SymbolReference.solved(new JavaParserTypeParameter(astTp, typeSolver)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 71) this.typeDeclaration.getAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
  Line 73) ancestor.getTypeDeclaration().internalTypes() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.internalTypes()
  Line 73) ancestor.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 74) internalTypeDeclaration.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 74) internalTypeDeclaration.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 75) SymbolReference.solved(internalTypeDeclaration) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 83) context.getParent().solveType(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 83) context.getParent() ==> com.github.javaparser.symbolsolver.core.resolution.Context.getParent()
  Line 87) typeDeclaration.getDeclaredMethods().stream().filter(m -> m.getName().equals(name)).filter(m -> !staticOnly || (staticOnly && m.isStatic())).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 87) typeDeclaration.getDeclaredMethods().stream().filter(m -> m.getName().equals(name)).filter(m -> !staticOnly || (staticOnly && m.isStatic())) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 87) typeDeclaration.getDeclaredMethods().stream().filter(m -> m.getName().equals(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 87) typeDeclaration.getDeclaredMethods().stream() ==> java.util.Collection.stream()
  Line 87) typeDeclaration.getDeclaredMethods() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getDeclaredMethods()
  Line 88) m.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 88) m.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 89) m.isStatic() ==> com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration.isStatic()
  Line 90) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 92) Object.class.getCanonicalName().equals(typeDeclaration.getQualifiedName()) ==> java.lang.String.equals(java.lang.Object)
  Line 92) Object.class.getCanonicalName() ==> java.lang.Class.getCanonicalName()
  Line 92) typeDeclaration.getQualifiedName() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.getQualifiedName()
  Line 93) typeDeclaration.getAncestors() ==> com.github.javaparser.symbolsolver.model.declarations.ReferenceTypeDeclaration.getAncestors()
  Line 95) ancestor.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 96) MethodResolutionLogic.solveMethodInType(ancestor.getTypeDeclaration(), name, argumentsTypes, staticOnly, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 97) ancestor.getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 101) res.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 102) candidateMethods.add(res.getCorrespondingDeclaration()) ==> java.util.List.add(E)
  Line 102) res.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 109) candidateMethods.isEmpty() ==> java.util.List.isEmpty()
  Line 110) context.getParent().solveMethod(name, argumentsTypes, staticOnly, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 110) context.getParent() ==> com.github.javaparser.symbolsolver.core.resolution.Context.getParent()
  Line 111) parentSolution.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 112) candidateMethods.add(parentSolution.getCorrespondingDeclaration()) ==> java.util.List.add(E)
  Line 112) parentSolution.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 117) candidateMethods.isEmpty() ==> java.util.List.isEmpty()
  Line 117) typeDeclaration.isInterface() ==> com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration.isInterface()
  Line 118) MethodResolutionLogic.solveMethodInType(new ReflectionClassDeclaration(Object.class, typeSolver), name, argumentsTypes, false, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.solveMethodInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 119) res.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 120) candidateMethods.add(res.getCorrespondingDeclaration()) ==> java.util.List.add(E)
  Line 120) res.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 124) MethodResolutionLogic.findMostApplicable(candidateMethods, name, argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 129) ConstructorResolutionLogic.findMostApplicable(((ClassDeclaration) typeDeclaration).getConstructors(), argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.ConstructorResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.ConstructorDeclaration>, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 129) ((ClassDeclaration) typeDeclaration).getConstructors() ==> com.github.javaparser.symbolsolver.model.declarations.ClassDeclaration.getConstructors()
  Line 131) SymbolReference.unsolved(ConstructorDeclaration.class) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.unsolved(java.lang.Class<S2>)
