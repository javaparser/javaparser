  Line 41) comments.addAll(commentsToCopy) ==> java.util.TreeSet.addAll(java.util.Collection<? extends E>)
  Line 45) comments.stream().filter(comment -> comment instanceof LineComment).map(comment -> (LineComment) comment).collect(Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 45) comments.stream().filter(comment -> comment instanceof LineComment).map(comment -> (LineComment) comment) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 45) comments.stream().filter(comment -> comment instanceof LineComment) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 45) comments.stream() ==> java.util.Collection.stream()
  Line 48) Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 52) comments.stream().filter(comment -> comment instanceof BlockComment).map(comment -> (BlockComment) comment).collect(Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 52) comments.stream().filter(comment -> comment instanceof BlockComment).map(comment -> (BlockComment) comment) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 52) comments.stream().filter(comment -> comment instanceof BlockComment) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 52) comments.stream() ==> java.util.Collection.stream()
  Line 55) Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 59) comments.stream().filter(comment -> comment instanceof JavadocComment).map(comment -> (JavadocComment) comment).collect(Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 59) comments.stream().filter(comment -> comment instanceof JavadocComment).map(comment -> (JavadocComment) comment) ==> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
  Line 59) comments.stream().filter(comment -> comment instanceof JavadocComment) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 59) comments.stream() ==> java.util.Collection.stream()
  Line 62) Collectors.toCollection(() -> new TreeSet<>(NODE_BY_BEGIN_POSITION)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 66) comments.add(comment) ==> java.util.TreeSet.add(E)
  Line 70) getComments() ==> com.github.javaparser.ast.comments.CommentsCollection.getComments()
  Line 73) c.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 73) comment.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 74) c.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 74) comment.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 75) c.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 75) comment.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 76) Math.abs(c.getEnd().column - comment.getEnd().column) ==> java.lang.Math.abs(int)
  Line 76) c.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 76) comment.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 88) comments.size() ==> java.util.TreeSet.size()
  Line 93) result.comments.addAll(comments.stream().filter(comment -> !other.contains(comment)).collect(Collectors.toList())) ==> java.util.TreeSet.addAll(java.util.Collection<? extends E>)
  Line 94) comments.stream().filter(comment -> !other.contains(comment)).collect(Collectors.toList()) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 94) comments.stream().filter(comment -> !other.contains(comment)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 94) comments.stream() ==> java.util.Collection.stream()
  Line 95) other.contains(comment) ==> com.github.javaparser.ast.comments.CommentsCollection.contains(com.github.javaparser.ast.comments.Comment)
  Line 96) Collectors.toList() ==> java.util.stream.Collectors.toList()
