  Line 53) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 67) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 68) setVariables(singletonList(new VariableDeclarator(variableName))) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 68) singletonList(new VariableDeclarator(variableName)) ==> java.util.Collections.singletonList(T)
  Line 72) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 73) setVariables(singletonList(var)) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 73) singletonList(var) ==> java.util.Collections.singletonList(T)
  Line 77) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 78) setVariables(singletonList(new VariableDeclarator(variableName))) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 78) singletonList(new VariableDeclarator(variableName)) ==> java.util.Collections.singletonList(T)
  Line 79) setModifiers(Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)))) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 79) Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 79) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 80) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 80) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 84) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 85) setVariables(singletonList(var)) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 85) singletonList(var) ==> java.util.Collections.singletonList(T)
  Line 86) setModifiers(Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)))) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 86) Arrays.stream(modifiers).collect(Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class))) ==> java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
  Line 86) Arrays.stream(modifiers) ==> java.util.Arrays.stream(T[])
  Line 87) Collectors.toCollection(() -> EnumSet.noneOf(Modifier.class)) ==> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
  Line 87) EnumSet.noneOf(Modifier.class) ==> java.util.EnumSet.noneOf(java.lang.Class<E>)
  Line 91) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 92) setVariables(variables) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 97) setModifiers(modifiers) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 98) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 99) setVariables(variables) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 108) setModifiers(modifiers) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)
  Line 109) setAnnotations(annotations) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setAnnotations(java.util.List<com.github.javaparser.ast.expr.AnnotationExpr>)
  Line 110) setElementType(elementType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setElementType(com.github.javaparser.ast.type.Type)
  Line 111) setVariables(variables) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(java.util.List<com.github.javaparser.ast.body.VariableDeclarator>)
  Line 112) setArrayBracketPairsAfterElementType(arrayBracketPairsAfterType) ==> com.github.javaparser.ast.expr.VariableDeclarationExpr.setArrayBracketPairsAfterElementType(java.util.List<com.github.javaparser.ast.ArrayBracketPair>)
  Line 126) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.GenericVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)
  Line 131) v.visit(this, arg) ==> com.github.javaparser.ast.visitor.VoidVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)
  Line 136) ensureNotNull(annotations) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 158) ensureNotNull(variables) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 165) setAsParentNodeOf(this.annotations) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 178) setAsParentNodeOf(this.elementType) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(com.github.javaparser.ast.Node)
  Line 185) setAsParentNodeOf(this.variables) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
  Line 190) ensureNotNull(arrayBracketPairsAfterType) ==> com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)
  Line 197) setAsParentNodeOf(arrayBracketPairsAfterType) ==> com.github.javaparser.ast.Node.setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)
