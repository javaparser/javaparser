  Line 52) comments.isEmpty() ==> java.util.TreeSet.isEmpty()
  Line 63) cu.getChildrenNodes() ==> com.github.javaparser.ast.Node.getChildrenNodes()
  Line 64) PositionUtils.sortByBeginPosition(children) ==> com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)
  Line 66) comments.iterator().next() ==> java.util.Iterator.next()
  Line 66) comments.iterator() ==> java.util.TreeSet.iterator()
  Line 67) cu.getPackage() ==> com.github.javaparser.ast.CompilationUnit.getPackage()
  Line 68) children.isEmpty() ==> java.util.List.isEmpty()
  Line 68) PositionUtils.areInOrder(firstComment, children.get(0)) ==> com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
  Line 69) children.get(0) ==> java.util.List.get(int)
  Line 70) cu.setComment(firstComment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 71) comments.remove(firstComment) ==> java.util.TreeSet.remove(java.lang.Object)
  Line 80) commentsToAttribute.isEmpty() ==> java.util.TreeSet.isEmpty()
  Line 84) insertComments((CompilationUnit) node, commentsToAttribute) ==> com.github.javaparser.CommentsInserter.insertComments(com.github.javaparser.ast.CompilationUnit, java.util.TreeSet<com.github.javaparser.ast.comments.Comment>)
  Line 95) node.getChildrenNodes() ==> com.github.javaparser.ast.Node.getChildrenNodes()
  Line 96) PositionUtils.sortByBeginPosition(children) ==> com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)
  Line 101) PositionUtils.nodeContains(child, c, configuration.doNotConsiderAnnotationsAsNodeStartForCodeAttribution) ==> com.github.javaparser.utils.PositionUtils.nodeContains(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)
  Line 103) commentsInsideChild.add(c) ==> java.util.TreeSet.add(E)
  Line 106) commentsToAttribute.removeAll(commentsInsideChild) ==> java.util.AbstractSet.removeAll(java.util.Collection<?>)
  Line 107) insertComments(child, commentsInsideChild) ==> com.github.javaparser.CommentsInserter.insertComments(com.github.javaparser.ast.Node, java.util.TreeSet<com.github.javaparser.ast.comments.Comment>)
  Line 114) comment.isLineComment() ==> com.github.javaparser.ast.comments.Comment.isLineComment()
  Line 116) child.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 116) comment.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 117) attributeLineCommentToNodeOrChild(child, comment.asLineComment()) ==> com.github.javaparser.CommentsInserter.attributeLineCommentToNodeOrChild(com.github.javaparser.ast.Node, com.github.javaparser.ast.comments.LineComment)
  Line 118) comment.asLineComment() ==> com.github.javaparser.ast.comments.Comment.asLineComment()
  Line 119) attributedComments.add(comment) ==> java.util.List.add(E)
  Line 130) childrenAndComments.addAll(children) ==> java.util.List.addAll(java.util.Collection<? extends E>)
  Line 131) childrenAndComments.addAll(commentsToAttribute) ==> java.util.List.addAll(java.util.Collection<? extends E>)
  Line 132) PositionUtils.sortByBeginPosition(childrenAndComments, configuration.doNotConsiderAnnotationsAsNodeStartForCodeAttribution) ==> com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>, boolean)
  Line 138) previousComment.isOrphan() ==> com.github.javaparser.ast.comments.Comment.isOrphan()
  Line 142) thing.hasComment() ==> com.github.javaparser.ast.Node.hasComment()
  Line 144) thereAreLinesBetween(previousComment, thing) ==> com.github.javaparser.CommentsInserter.thereAreLinesBetween(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
  Line 145) thing.setComment(previousComment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 146) attributedComments.add(previousComment) ==> java.util.List.add(E)
  Line 153) commentsToAttribute.removeAll(attributedComments) ==> java.util.AbstractSet.removeAll(java.util.Collection<?>)
  Line 157) c.isOrphan() ==> com.github.javaparser.ast.comments.Comment.isOrphan()
  Line 158) node.addOrphanComment(c) ==> com.github.javaparser.ast.Node.addOrphanComment(com.github.javaparser.ast.comments.Comment)
  Line 166) node.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 166) lineComment.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
  Line 167) node.hasComment() ==> com.github.javaparser.ast.Node.hasComment()
  Line 169) node.setComment(lineComment) ==> com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)
  Line 176) children.addAll(node.getChildrenNodes()) ==> java.util.List.addAll(java.util.Collection<? extends E>)
  Line 176) node.getChildrenNodes() ==> com.github.javaparser.ast.Node.getChildrenNodes()
  Line 177) PositionUtils.sortByBeginPosition(children) ==> com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)
  Line 178) Collections.reverse(children) ==> java.util.Collections.reverse(java.util.List<?>)
  Line 181) attributeLineCommentToNodeOrChild(child, lineComment) ==> com.github.javaparser.CommentsInserter.attributeLineCommentToNodeOrChild(com.github.javaparser.ast.Node, com.github.javaparser.ast.comments.LineComment)
  Line 191) PositionUtils.areInOrder(a, b) ==> com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
  Line 192) thereAreLinesBetween(b, a) ==> com.github.javaparser.CommentsInserter.thereAreLinesBetween(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
  Line 194) a.getEnd() ==> com.github.javaparser.ast.Node.getEnd()
  Line 195) b.getBegin() ==> com.github.javaparser.ast.Node.getBegin()
